#////////
#Fuel Control
#////////

{if defined(FUEL)

.\Gasoline_Constants.elcfg
                #Basic physical propereties of gasoline preset to normal values but can be changed by user
                #Fuel_Molar_Mass [g/mol]
                #Fuel_Stoich_Ratio
                #Fuel_Density [kg/m3]
                #Fuel_Density_Tep_Coef [kg/m3/C]
                #Fuel_Cooling [C] - This is the amount of inlet air temp cooling due to fuel vaporization

.\Load.elcfg
                #Creates a normallized MAP value to separate manifold pressue changes due to barometric pressure from pressure changes due to throttle position
                #Load [%] - MAP/Baro


.\MAF.elcfg
                #Calculates the Mass Air Flow using the predefined speed density function.
                #VE [%] - user lookup table for VE
                #R [J/g*degK]
                #IAT_Cooled [K] applied the fuel cooling effect (Fuel_Cooling [C]) to the IAT
                #Delta_CLT_IAT [C] - temp difference between CLT and IAT
                #CLT_IAT_Bias - user lookup to set amount or CLT ot use in MAF calculation.....I'm not sure this is useful but it's required by the Speed Density function
                #MAF [g/s] - Mass air Follow in [g/s] 
 

.\Cylinder_Base_Fuel.elcfg
                #Calculates the per cylinder fuel required in [g]
                #Lambda_Target - user lookup for desired lambda vs load and rpm
                #Dummy_injector_flow [g/s] - the canned function is trying to calculate a pulse width so by using a flow rate of 1e+007 g/s the output is flow in [g]
                #Air/Fuel_Ratio - Lambda_Target x Fuel_Stoich_Ratio
                #Cylinder_Base_Fuel [g] - required fuel per cylinder per cycle in [g]


.\Start_Adder.elcfg

                #Start_Adder_Enable
                #Start_adder_Clamp - restrict value to 0-1 (also the layout should be setup to only accept 0/1)
                #Start_Enrich [g] - user lookup for extra fuel required vs temp and cycles
                #Start_Adder [g] - if enabled use Adder, if not set value to 0

.\CLT_Fuel_Corr.elcfg
                #CLT_Fuel_Enable
                #CLT_Fuel_Enable_Clamp - restrict value to 0-1 (also the layout should be setup to only accept 0/1)
                #CLT_Fuel_Correction [%] - user lookup for extra fuel required vs temp
                #CLT_Fuel_Corr [%] - if enabled use corr, if not set value to 0

.\Flood_Clear.elcfg
                #Routine to cut fuel during cranking if throttle is full open to clear flood
                #Flood_Clear_Enable - input to enable feature
                #Flood_Clear_Enable_Clamp - limit value to 0-1 (should also set the layout to only allow 0/1 input)
                #Flood_Test - True if enabled AND engine not running AND throttle open more than 90% 
                #Flood_Clear - inverts test resuls so 0 = flooded and 1 = not flooded which will set Fuel_Req to 0 when flooded


.\lambda_Fuel_Error.elcfg
                #Calculates the difference between lambda and lambda target in [g] and as a ratio
                #Lambda_Error_Ratio_Bank1
                #Fuel_Error_Bank1 [g]  - difference in [g] between desired lambda and actual lambda
                #Lambda_Error_Ratio_Bank2
                #Fuel_Error_Bank2 [g]  - difference in [g] between desired lambda and actual lambda

.\Fuel_Req_Subtotal.elcfg
                #fuel requirement subtotal should come after all global corrections EXCEPT wall wetting...this is the number wallwetting is applied to
                #Fuel_Req_Subtotal [g] - totals up all the fuel corrections other than wall wetting stuff in [g]

.\Wall_Wetting.elcfg
                #Determines if wetting (accel/decel) fuel corrections should be enabled.

                #Fuel_Wetting_Enable - input to enable feature
                #Fuel_Wetting_Enable_Clamp - limit value to 0-1 (should also set the layout to only allow 0/1 input)
                #Fuel_Wetting_Enbale_Time [s] - run time before system enables
                #Fuel_Wetting_Enable_Time_Clamp - limit value to 0-120
                #Fuel_Wetting_Enable_Test - if enable and enable time contions met = 1, else 0
                #Fuel_Wetting_Enable_Test_Last
                #Wetting_Cycle_Count_Last


                #Fuel_Stored_Base [mg] - fuel stored in manifold vs MAP and RPM
                #Fuel_Stored_CLT_Corr_Enable
                #Fuel_Stored_CLT_Corr_Enable_Clamp
                #Fuel_Stored_CLT_Corr [%] - CLT correction for stored fuel
                #Fuel_Stored_IAT_Corr_Enable
                #Fuel_Stored_IAT_Corr_Enable_Clamp
                #Fuel_Stored_IAT_Corr [%] - IAT correction for stored fuel
                #Fuel_Stored_Angle_Corr_Enable
                #Fuel_Stored_Angle_Corr_Enable_Clamp
                #Fuel_Stored_Angle_Corr [%]
                #Fuel_Stored_Target [g] - Fuel_Stored_base* 0.001 * (1+Fuel_Stored_CLT_Corr [%]*0.01*Fuel_Stored_CLT_Corr_Enable_Clamp) * (1+Fuel_Stored_IAT_Corr [%]*0.01*Fuel_Stored_IAT_Corr_Enable_Clamp)*(1+Fuel_Stored_Angle_Corr [%]*.01*Fuel_Stored_Angle_Corr_Enable_Clamp)

                #Fuel_Stored_Delta [mg] - fuel stored_Target - Fuel_Stored_Current
                #Fuel_Stored_Correction [%] - % correction to make based on Fuel_Stored_Delta and RPM
                #Fuel_Stored Correction [g]


                #This is the running total of fuel that is currently stored in each intake path in [g].  The stored fuel is set to the target prior to system becoming active.
                #Fuel_Stored [g] - running total of fuel stored
                #Fuel_Stored_Current [g]  - select Fuel_stored or Fuel_stored_Target to set as current.

.\Fuel_Req.elcfg
                #fuel requirement is the desire fuel in grams

                #Fuel_Req [g]
                #Fuel_Req [g/s] - fuel flow rate g x #cyl x rpm/120, (/120 replaced with x0.0083333)


.\Injector_Time.elcfg
                #convert grams of fuel into pulse width

                #Enable_Injectors
                #Enable_Injectors_Clamp
                #Injector_On - 1 if Enable_Injectors = 1 and rpm > 1


                #Differential_Fuel_Pres [kPa] - Fuel Pressure ralative to MAP [kPa]
                #Flow_Rate [g/s] - injector flow rate vs differentail pressure in [g/s]
                #Offset [msec] - the offset of "deadtime" for the injector vs differentail fuel pressure vs battery voltage

                #FI_TimingX [degBTDC] - reguired variable, user lookup table for injection end time

                #Base_Injector_Time [msec] - calculates the inj
                #Shor_Pulse_Adder [msec] - user lookup for short pulse correction

                        
                #Cylinder_Fuel_Trim Enable - enable cyclinder trims
                #Cylinder_Fuel_Trim Enable_Clamp
                #Cylinder_1_Fuel_Trim [%]  - Cylinder fuel trim tables
                #Cylinder_2_Fuel_Trim [%]
                #Cylinder_3_Fuel_Trim [%]
                #Cylinder_4_Fuel_Trim [%]
                #Cylinder_5_Fuel_Trim [%]
                #Cylinder_6_Fuel_Trim [%]
                #Cylinder_7_Fuel_Trim [%]
                #Cylinder_8_Fuel_Trim [%]
                #Cylinder_9_Fuel_Trim [%]
                #Cylinder_10_Fuel_Trim [%]
                #Cylinder_11_Fuel_Trim [%]
                #Cylinder_12_Fuel_Trim [%]

                        #Cylinder fuel time for EAL
                #ReqFuel1 [us/10] - Req variable for fuel in [usec/10]
                #ReqFuel2 [us/10]
                #ReqFuel3 [us/10]
                #ReqFuel4 [us/10]
                #ReqFuel5 [us/10]
                #ReqFuel6 [us/10]
                #ReqFuel7 [us/10]
                #ReqFuel8 [us/10]
                #ReqFuel9 [us/10]
                #ReqFuel10 [us/10]
                #ReqFuel11 [us/10]
                #ReqFuel12 [us/10]



.\Fuel_basic.elcfg
                #Values required by EAL for lowZ injectors, not used in this project
                #FI_DutyCycX %high: Duty cycle during PWM after the injector is open. (Applies to peak and hold). Set to 100 for high impedance injectors.
                #FI_CyclTimeX us/10: Cycle time during PWM after injector is open. (Applies to peak and hold). Set to anything >= 100 for high impedance injectors.
                #FI_OpenTimeX us/10: Injector open time. PWM will proceed following this time setting.


}


