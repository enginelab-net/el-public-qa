//--------------------------------------
// THIS FILE IS AUTOMATICALLY GENERATED
//             DO NOT EDIT
//   ALL CHANGES WILL BE OVERWRITTEN
//--------------------------------------

#ifndef _EL_PLUGIN_API_H_
#define _EL_PLUGIN_API_H_

// This wrapper is used to stop errors from the old style modify to the new style...
#ifndef _EL_MODIFY_DLL_API_H_
#define _EL_MODIFY_DLL_API_H_
#if !defined(_EL_MODIFY_DLL_API_IGNORE_ALL_BAR_API_) && !defined(_TRANSFERSTRUCTS_H)
#define VAR_COUNT(x) ((WORD)(((x).var_data_count_h << 8) | (x).var_data_count_l))
#define SET_VAR_COUNT(dts, n) { (dts).var_data_count_h = (n) >> 8; (dts).var_data_count_l = (n) & 0xFF; }

typedef union { BYTE *byte_data; WORD *word_data; DWORD *dword_data; float *float_data; } DTS_pointer;

#define TS_CFGITEMHEADER_CONSTANT_INPUT 0xFFF0

#define ENGINELAB_MODIFY_DLL_VERSION 96

typedef struct tag_GenericArray_DTS
{
    BYTE var_data_size;
    BYTE var_data_count_h;
    BYTE var_data_count_l;
    DTS_pointer var;
}GenericArray_DTS, *pGenericArray_DTS;

//      PositionSensor_TS.edge_trigger
#define TS_POSITIONSENSOR_EDGE_TRIGGER_RISINGEDGE         0
#define TS_POSITIONSENSOR_EDGE_TRIGGER_FALLINGEDGE        1
#define TS_POSITIONSENSOR_EDGE_TRIGGER_RISINGFALLINGEDGES 2
#define TS_POSITIONSENSOR_EDGE_TRIGGER_COUNT_             3
typedef struct tag_PositionSensor_TS
{
    BYTE harness_pin_number;
    BYTE noise_cancellation;
    BYTE number_of_teeth;
    BYTE edge_trigger;
}PositionSensor_TS, *pPositionSensor_TS;

//      ConfigurationItemHeader_modifiable_TS.mod_flags
#define TS_CFGITEMHEADER_MODIFIABLE_MOD_FLAGS_PRIVATE_ITEM_SHIFT     11
#define TS_CFGITEMHEADER_MODIFIABLE_MOD_FLAGS_PRIVATE_ITEM_MASK      0x0800
#define TS_CFGITEMHEADER_MODIFIABLE_MOD_FLAGS_PRIVATE_ITEM_ON        0x0800
#define TS_CFGITEMHEADER_MODIFIABLE_MOD_FLAGS_HIDDEN_SHIFT           0
#define TS_CFGITEMHEADER_MODIFIABLE_MOD_FLAGS_HIDDEN_MASK            0x0001
#define TS_CFGITEMHEADER_MODIFIABLE_MOD_FLAGS_HIDDEN_ON              0x0001
#define TS_CFGITEMHEADER_MODIFIABLE_MOD_FLAGS_CLAMP_OUTPUT_SHIFT     12
#define TS_CFGITEMHEADER_MODIFIABLE_MOD_FLAGS_CLAMP_OUTPUT_MASK      0x1000
#define TS_CFGITEMHEADER_MODIFIABLE_MOD_FLAGS_CLAMP_OUTPUT_ON        0x1000
#define TS_CFGITEMHEADER_MODIFIABLE_MOD_FLAGS_USE_TEST_OUTPUT_SHIFT  13
#define TS_CFGITEMHEADER_MODIFIABLE_MOD_FLAGS_USE_TEST_OUTPUT_MASK   0x2000
#define TS_CFGITEMHEADER_MODIFIABLE_MOD_FLAGS_USE_TEST_OUTPUT__      0x2000
#define TS_CFGITEMHEADER_MODIFIABLE_MOD_FLAGS_PASSWORD_PROTECT_SHIFT 14
#define TS_CFGITEMHEADER_MODIFIABLE_MOD_FLAGS_PASSWORD_PROTECT_MASK  0x4000
#define TS_CFGITEMHEADER_MODIFIABLE_MOD_FLAGS_PASSWORD_PROTECT__     0x4000
typedef struct tag_ConfigurationItemHeader_modifiable_TS
{
    float outputValue;
    float outputValueInitial;
    float outputValueTest;
    float clamp_lower;
    float clamp_upper;
    BYTE type;
    WORD outputChannel;
    GenericArray_DTS channel_name;
    GenericArray_DTS input_channels;
    GenericArray_DTS input_data_pointers;
    WORD mod_flags;
}ConfigurationItemHeader_modifiable_TS, *pConfigurationItemHeader_modifiable_TS;

//      ConfigurationEngineDescriptorItem_modifiable_TS.cycles
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_CYCLES_TWOSTROKE                                              2
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_CYCLES_FOURSTROKE                                             4
//      ConfigurationEngineDescriptorItem_modifiable_TS.timing_type
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_SINGLETOOTHCAM                                    0
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_HONDA600RR                                        1
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_SINGLECAMCRANK1TOOTHMISSING                       2
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_SINGLECAMCRANK1TOOTHMISSING_VVT                   3
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_SINGLECAMCRANK2TOOTHMISSING                       4
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_SINGLECAMCRANK2TOOTHMISSING_VVT                   5
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_HONDACIVIC_5T_CAM_12_1CRANK                       6
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_HONDARSX_5T_4T_CAMS_12_1CRANK_VVT                 7
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_SUBARUWRXSTI_3T_3T_2T_2T_CAMS_36_2_2_2CRANK_VVT   8
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_1GDSM_2T_CAM_4_CRANK                              9
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_NISSAN_QG18DE_10T_CAM_36_2_CRANK                  10
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_DODGENGC_15T_CAM_36_2_2_CRANK_VVT                 11
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_DODGEVIPER92_95_4T_CAM_20_2_2_2_2_2_CRANK         12
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_DODGEVIPER96_1T_CAM_20_2_2_2_2_2_CRANK            13
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_MITSUBISHIEVO8_9_2T_CAM_4_CRANK_VVT               14
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_GM_LS7_4T_CAM_60_2_CRANK_VVT                      15
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_BMW_S54_7T_6T_CAMS_60_2_CRANK_VVT                 16
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_BMW_S65_7T_6T_CAMS_60_2_CRANK_VVT                 17
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_NISSAN_VQ35_6T_6T_CAMS_36_2_2_2_CRANK_VVT         18
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_NISSAN_VQ35_6T_6T_3T_3T_CAMS_36_2_2_2_CRANK_VVT   19
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_NISSAN_VQ37_6T_6T_CAMS_36_2_2_2_CRANK_VVT         20
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_TOYOTA_2JZGTE_3T_CAM_36_2_CRANK_VVT               21
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_DODGEVIPER4THGENERATION_5T_CAM_60_2_CRANK         22
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_HONDAJ35_37_3T_CAM_24_1_1_CRANK                   23
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_SUBARUEZ36_3T_3T_3T_3T_CAMS_36_2_2_2CRANK_VVT     24
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_HONDAF22C_3T_CAM_12_CRANK_VVT                     25
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_PORSCHE997_4T_4T_CAMS_60_2_CRANK_VVT              26
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_FORDCOYOTE_7T_7T_7T_7T_CAMS_36_1_CRANK_VVT        27
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_VOLKSWAGON_4T_CAMS_60_2_CRANK_VVT                 28
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_LAMBORGHINI_4T_4T_4T_4T_CAMS_36_1_1_1_1_CRANK_VVT 29
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_GM_LFX_4T_4T_4T_4T_CAMS_60_2_CRANK_VVT            30
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_TOYOTA_2GR_FE_3T_3T_3T_3T_CAMS_36_2_CRANK_VVT     31
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_YAMAHA_1800_1_CAM_4_1_CRANK                       32
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_NISSAN_RB26DETT_6_CAM_180_CRANK                   33
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_NISSAN_SR20DET_4_CAM_180_CRANK                    34
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_FORD_4_6_3V_5_5_CAM_36_1_CRANK                    35
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_MAZDA_L_MZR_6_CAM_36_2_2_2_CRANK_VVT              36
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_TOYOTA_3SGE_3T_CAM_36_2_CRANK_VVT                 37
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_TIMING_TYPE_COUNT_                                            38
//      ConfigurationEngineDescriptorItem_modifiable_TS.sync_response
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_STATE_NOT_SYNCED                                0
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_STATE_SYNCED                                    1
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_STATE_SYNC_ERROR_CRANK_TOOTH_MISSED             2
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_STATE_SYNC_ERROR_CRANK_TOOTH_PRESENT            3
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_STATE_SYNC_ERROR_PRIMARY_CAM_SIGNATURE          4
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_STATE_SYNC_ERROR_SECONDARY_CAM_SIGNATURE        5
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_STATE_SYNC_ERROR_SECONDARY0_CAM_SIGNATURE       6
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_STATE_SYNC_ERROR_SECONDARY1_CAM_SIGNATURE       7
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_STATE_SYNC_ERROR_SECONDARY2_CAM_SIGNATURE       8
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_STATE_SYNC_ERROR_SECONDARY3_CAM_SIGNATURE       9
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_STATE_SYNC_ERROR_SECONDARY4_CAM_SIGNATURE       10
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_STATE_SYNC_ERROR_SECONDARY5_CAM_SIGNATURE       11
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_STATE_SYNC_ERROR_SECONDARY6_CAM_SIGNATURE       12
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_STATE_SYNC_ERROR_SECONDARY7_CAM_SIGNATURE       13
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_STATE_SYNC_ERROR_SECONDARY8_CAM_SIGNATURE       14
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_STATE_SYNC_ERROR_SECONDARY9_CAM_SIGNATURE       15
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_STATE_SYNC_ERROR_SECONDARY10_CAM_SIGNATURE      16
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_STATE_SYNC_ERROR_SECONDARY11_CAM_SIGNATURE      17
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_STATE_SYNC_ERROR_SECONDARY12_CAM_SIGNATURE      18
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_STATE_SYNC_ERROR_SECONDARY13_CAM_SIGNATURE      19
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_STATE_SYNC_ERROR_SECONDARY14_CAM_SIGNATURE      20
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_STATE_SYNC_ERROR_SECONDARY15_CAM_SIGNATURE      21
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_STATE_SYNC_ERROR_GENERIC0                       22
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_STATE_SYNC_ERROR_GENERIC1                       23
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_STATE_SYNC_ERROR_GENERIC2                       24
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_STATE_SYNC_ERROR_GENERIC3                       25
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_STATE_SYNC_ERROR_GENERIC4                       26
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_STATE_SYNC_ERROR_GENERIC5                       27
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_STATE_SYNC_ERROR_GENERIC6                       28
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_STATE_SYNC_ERROR_GENERIC7                       29
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_STATE_SYNC_ERROR_GENERIC8                       30
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_STATE_SYNC_ERROR_GENERIC9                       31
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_SYNC_RESPONSE_COUNT_                                          32
//      ConfigurationEngineDescriptorItem_modifiable_TS.coil_type
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_COIL_TYPE_SETUP_SHIFT                                         0
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_COIL_TYPE_SETUP_MASK                                          0x03
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_COIL_TYPE_SETUP_COP                                           0x00
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_COIL_TYPE_SETUP_WASTED_SPARK                                  0x01
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_COIL_TYPE_SETUP_DISTRIBUTOR                                   0x02
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_COIL_TYPE_INVERT_SHIFT                                        2
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_COIL_TYPE_INVERT_MASK                                         0x04
#define TS_ENGINEDESCRIPTOR_ITEM_MODIFIABLE_COIL_TYPE_INVERT__                                            0x04
typedef struct tag_ConfigurationEngineDescriptorItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
    PositionSensor_TS crank;
    PositionSensor_TS cam0;
    PositionSensor_TS cam1;
    PositionSensor_TS cam2;
    PositionSensor_TS cam3;
    BYTE noise_cancellation_mode;
    BYTE num_coils;
    BYTE num_sparks;
    BYTE num_injectors;
    BYTE coil_type;
    BYTE num_cylinders;
    BYTE cycles;
    BYTE timing_type;
    float displacement;
    GenericArray_DTS spark_base_timings;
    GenericArray_DTS injector_base_timings;
    GenericArray_DTS spark_knock_sense_indexes;
    GenericArray_DTS spark_knock_sense_timings;
    GenericArray_DTS spark_knock_sense_widths;
    GenericArray_DTS sync_response;
    GenericArray_DTS misc_settings;
    BYTE crank_speed_sparking_toothoffset;
    BYTE crank_speed_sparking_toothcount;
    BYTE gdi_pump_cam_number;
    BYTE gdi_pump_cam_number_of_lobes;
}ConfigurationEngineDescriptorItem_modifiable_TS, *pConfigurationEngineDescriptorItem_modifiable_TS;

typedef struct tag_ConfigurationPassthroughItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
}ConfigurationPassthroughItem_modifiable_TS, *pConfigurationPassthroughItem_modifiable_TS;

typedef struct tag_ConfigurationAnalogInputConditioningItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
    float input_min;
    float input_max;
    float clamping_override;
    BYTE clamping_override_enable;
}ConfigurationAnalogInputConditioningItem_modifiable_TS, *pConfigurationAnalogInputConditioningItem_modifiable_TS;

typedef struct tag_ConfigurationPredefItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
}ConfigurationPredefItem_modifiable_TS, *pConfigurationPredefItem_modifiable_TS;

typedef struct tag_ConfigurationMathItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
}ConfigurationMathItem_modifiable_TS, *pConfigurationMathItem_modifiable_TS;

typedef struct tag_ConfigurationIfElseItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
}ConfigurationIfElseItem_modifiable_TS, *pConfigurationIfElseItem_modifiable_TS;

//      Configuration1DTableItem_modifiable_DTS.cell_adjust
#define TS_1DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_DISABLED     0
#define TS_1DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_ASSIGN       1
#define TS_1DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_ADD          2
#define TS_1DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_MULTIPLY     3
#define TS_1DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_FILTER_50    10
#define TS_1DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_FILTER_60    20
#define TS_1DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_FILTER_70    30
#define TS_1DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_FILTER_80    40
#define TS_1DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_FILTER_90    50
#define TS_1DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_FILTER_91    60
#define TS_1DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_FILTER_92    70
#define TS_1DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_FILTER_93    80
#define TS_1DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_FILTER_94    90
#define TS_1DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_FILTER_95    100
#define TS_1DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_FILTER_96    120
#define TS_1DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_FILTER_97    140
#define TS_1DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_FILTER_98    160
#define TS_1DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_FILTER_99    180
#define TS_1DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_FILTER_100   200
typedef struct tag_Configuration1DTableItem_modifiable_DTS
{
    ConfigurationItemHeader_modifiable_TS header;
    GenericArray_DTS axis_points;
    float range_min;
    float range_max;
    BYTE interpolate;
    BYTE axis_selector;
    BYTE cell_adjust;
    BYTE var_data_size;
    BYTE var_data_count_h;
    BYTE var_data_count_l;
    DTS_pointer var;
}Configuration1DTableItem_modifiable_DTS, *pConfiguration1DTableItem_modifiable_DTS;

//      Configuration2DTableItem_modifiable_DTS.cell_adjust
#define TS_2DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_DISABLED     0
#define TS_2DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_ASSIGN       1
#define TS_2DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_ADD          2
#define TS_2DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_MULTIPLY     3
#define TS_2DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_FILTER_50    10
#define TS_2DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_FILTER_60    20
#define TS_2DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_FILTER_70    30
#define TS_2DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_FILTER_80    40
#define TS_2DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_FILTER_90    50
#define TS_2DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_FILTER_91    60
#define TS_2DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_FILTER_92    70
#define TS_2DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_FILTER_93    80
#define TS_2DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_FILTER_94    90
#define TS_2DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_FILTER_95    100
#define TS_2DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_FILTER_96    120
#define TS_2DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_FILTER_97    140
#define TS_2DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_FILTER_98    160
#define TS_2DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_FILTER_99    180
#define TS_2DTABLE_ITEM_MODIFIABLE_CELL_ADJUST_FILTER_100   200
typedef struct tag_Configuration2DTableItem_modifiable_DTS
{
    ConfigurationItemHeader_modifiable_TS header;
    GenericArray_DTS axis0_points;
    GenericArray_DTS axis1_points;
    float range_min;
    float range_max;
    BYTE interpolate;
    BYTE axis0_selector;
    BYTE axis1_selector;
    BYTE cell_adjust;
    BYTE var_data_size;
    BYTE var_data_count_h;
    BYTE var_data_count_l;
    DTS_pointer var;
}Configuration2DTableItem_modifiable_DTS, *pConfiguration2DTableItem_modifiable_DTS;

typedef struct tag_ConfigurationRunningAverageItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
}ConfigurationRunningAverageItem_modifiable_TS, *pConfigurationRunningAverageItem_modifiable_TS;

typedef struct tag_ConfigurationSlopeItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
}ConfigurationSlopeItem_modifiable_TS, *pConfigurationSlopeItem_modifiable_TS;

typedef struct tag_ConfigurationMultiplexItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
}ConfigurationMultiplexItem_modifiable_TS, *pConfigurationMultiplexItem_modifiable_TS;

typedef struct tag_ConfigurationMafFuelRequirementItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
}ConfigurationMafFuelRequirementItem_modifiable_TS, *pConfigurationMafFuelRequirementItem_modifiable_TS;

typedef struct tag_ConfigurationLimitingItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
}ConfigurationLimitingItem_modifiable_TS, *pConfigurationLimitingItem_modifiable_TS;

typedef struct tag_ConfigurationProfilerItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
}ConfigurationProfilerItem_modifiable_TS, *pConfigurationProfilerItem_modifiable_TS;

typedef struct tag_ConfigurationEmbeddedCodeItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
    GenericArray_DTS storage;
    GenericArray_DTS locals;
}ConfigurationEmbeddedCodeItem_modifiable_TS, *pConfigurationEmbeddedCodeItem_modifiable_TS;

typedef struct tag_ConfigurationUnitConversionItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
}ConfigurationUnitConversionItem_modifiable_TS, *pConfigurationUnitConversionItem_modifiable_TS;

//      ConfigurationThermistorItem_modifiable_TS._output_type
#define TS_THERMISTOR_ITEM_MODIFIABLE__OUTPUT_TYPE_RESISTANCEOHMS            0
#define TS_THERMISTOR_ITEM_MODIFIABLE__OUTPUT_TYPE_COOLANTTEMPDEGC           1
#define TS_THERMISTOR_ITEM_MODIFIABLE__OUTPUT_TYPE_AIRTEMPDEGC               2
#define TS_THERMISTOR_ITEM_MODIFIABLE__OUTPUT_TYPE_CLT_1GDSM_DEGC            3
#define TS_THERMISTOR_ITEM_MODIFIABLE__OUTPUT_TYPE_CLT_GM12146312_DEGC       4
#define TS_THERMISTOR_ITEM_MODIFIABLE__OUTPUT_TYPE_CLT_SUPRA_19937_DEGC      5
#define TS_THERMISTOR_ITEM_MODIFIABLE__OUTPUT_TYPE_CLT_HONDA1990_01_DEGC     6
#define TS_THERMISTOR_ITEM_MODIFIABLE__OUTPUT_TYPE_CLT_HONDA2002_06_DEGC     7
#define TS_THERMISTOR_ITEM_MODIFIABLE__OUTPUT_TYPE_CLT_SUBARU2004_06_DEGC    8
#define TS_THERMISTOR_ITEM_MODIFIABLE__OUTPUT_TYPE_CLT_EVO89_2GDSM_DEGC      9
#define TS_THERMISTOR_ITEM_MODIFIABLE__OUTPUT_TYPE_CLT_ACURACLT_DEGC         10
#define TS_THERMISTOR_ITEM_MODIFIABLE__OUTPUT_TYPE_AIR_GM25036751_DEGC       11
#define TS_THERMISTOR_ITEM_MODIFIABLE__OUTPUT_TYPE_AIR_HONDAS2000_00_05_DEGC 12
#define TS_THERMISTOR_ITEM_MODIFIABLE__OUTPUT_TYPE_AIR_HONDA1990_01_DEGC     13
#define TS_THERMISTOR_ITEM_MODIFIABLE__OUTPUT_TYPE_AIR_SUBARUSTI2004_06_DEGC 14
#define TS_THERMISTOR_ITEM_MODIFIABLE__OUTPUT_TYPE_AIR_TOYOTAMAF_DEGC        15
#define TS_THERMISTOR_ITEM_MODIFIABLE__OUTPUT_TYPE_AIR_NISSAN_DEGC           16
#define TS_THERMISTOR_ITEM_MODIFIABLE__OUTPUT_TYPE_COUNT_                    17
typedef struct tag_ConfigurationThermistorItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
    BYTE _output_type;
}ConfigurationThermistorItem_modifiable_TS, *pConfigurationThermistorItem_modifiable_TS;

typedef struct tag_ConfigurationPIDItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
}ConfigurationPIDItem_modifiable_TS, *pConfigurationPIDItem_modifiable_TS;

typedef struct tag_ConfigurationObdiiPIDItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
}ConfigurationObdiiPIDItem_modifiable_TS, *pConfigurationObdiiPIDItem_modifiable_TS;

typedef struct tag_ConfigurationObdiiTIDItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
}ConfigurationObdiiTIDItem_modifiable_TS, *pConfigurationObdiiTIDItem_modifiable_TS;

typedef struct tag_ConfigurationSpeedDensityItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
}ConfigurationSpeedDensityItem_modifiable_TS, *pConfigurationSpeedDensityItem_modifiable_TS;

typedef struct tag_ConfigurationTimerItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
}ConfigurationTimerItem_modifiable_TS, *pConfigurationTimerItem_modifiable_TS;

//      ConfigurationHardwareIOItem_modifiable_TS.harness_pin_mode
#define TS_HARDWAREIO_ITEM_MODIFIABLE_HARNESS_PIN_MODE_PULLUP_4700_OHM          0
#define TS_HARDWAREIO_ITEM_MODIFIABLE_HARNESS_PIN_MODE_PULLUP_10000_OHM         1
#define TS_HARDWAREIO_ITEM_MODIFIABLE_HARNESS_PIN_MODE_PULLUP_2200_OHM          2
#define TS_HARDWAREIO_ITEM_MODIFIABLE_HARNESS_PIN_MODE_LOWSIDE_2_AMP            3
#define TS_HARDWAREIO_ITEM_MODIFIABLE_HARNESS_PIN_MODE_LOWSIDE_5_AMP            4
#define TS_HARDWAREIO_ITEM_MODIFIABLE_HARNESS_PIN_MODE_LOWSIDE_10_AMP           5
#define TS_HARDWAREIO_ITEM_MODIFIABLE_HARNESS_PIN_MODE_HIGHSIDE_2_AMP           6
#define TS_HARDWAREIO_ITEM_MODIFIABLE_HARNESS_PIN_MODE_HIGHSIDE_5_AMP           7
#define TS_HARDWAREIO_ITEM_MODIFIABLE_HARNESS_PIN_MODE_HIGHSIDE_10_AMP          8
#define TS_HARDWAREIO_ITEM_MODIFIABLE_HARNESS_PIN_MODE_VARIABLE_RELUCTANCE      9
#define TS_HARDWAREIO_ITEM_MODIFIABLE_HARNESS_PIN_MODE_OPEN_COLLECTOR_200_MAMP  10
#define TS_HARDWAREIO_ITEM_MODIFIABLE_HARNESS_PIN_MODE_OPEN_COLLECTOR_4_AMP     11
#define TS_HARDWAREIO_ITEM_MODIFIABLE_HARNESS_PIN_MODE_NO_DRIVE_DIRECT_CONNECT  12
#define TS_HARDWAREIO_ITEM_MODIFIABLE_HARNESS_PIN_MODE_LOWSIDE_2_8_AMP          13
#define TS_HARDWAREIO_ITEM_MODIFIABLE_HARNESS_PIN_MODE_LOWSIDE_2_8_WPULLUP      14
#define TS_HARDWAREIO_ITEM_MODIFIABLE_HARNESS_PIN_MODE_LOWSIDE_6_AMP            15
#define TS_HARDWAREIO_ITEM_MODIFIABLE_HARNESS_PIN_MODE_LOWSIDE_6_WPULLUP        16
#define TS_HARDWAREIO_ITEM_MODIFIABLE_HARNESS_PIN_MODE_LOWSIDE_18_AMP           17
#define TS_HARDWAREIO_ITEM_MODIFIABLE_HARNESS_PIN_MODE_LOWSIDE_18_WPULLUP       18
#define TS_HARDWAREIO_ITEM_MODIFIABLE_HARNESS_PIN_MODE_INPUT_TRANSISTOR_SWITCH  19
#define TS_HARDWAREIO_ITEM_MODIFIABLE_HARNESS_PIN_MODE_INPUT_TRANSISTOR_WPULLUP 20
#define TS_HARDWAREIO_ITEM_MODIFIABLE_HARNESS_PIN_MODE_OPTOCOUPLER              21
#define TS_HARDWAREIO_ITEM_MODIFIABLE_HARNESS_PIN_MODE_STEPPERMOTORCONTROLLER   22
#define TS_HARDWAREIO_ITEM_MODIFIABLE_HARNESS_PIN_MODE_LOWSIDE_2_8_WFLYBACK     23
#define TS_HARDWAREIO_ITEM_MODIFIABLE_HARNESS_PIN_MODE_LOWSIDE_6_WFLYBACK       24
#define TS_HARDWAREIO_ITEM_MODIFIABLE_HARNESS_PIN_MODE_LOWSIDE_18_WFLYBACK      25
#define TS_HARDWAREIO_ITEM_MODIFIABLE_HARNESS_PIN_MODE_RS232_RX                 26
#define TS_HARDWAREIO_ITEM_MODIFIABLE_HARNESS_PIN_MODE_RS232_TX                 27
#define TS_HARDWAREIO_ITEM_MODIFIABLE_HARNESS_PIN_MODE_COUNT_                   28
typedef struct tag_ConfigurationHardwareIOItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
    BYTE harness_pin_mode;
}ConfigurationHardwareIOItem_modifiable_TS, *pConfigurationHardwareIOItem_modifiable_TS;

//      ConfigurationFixed1DTableItem_modifiable_TS._table_type
#define TS_FIXED1DTABLE_ITEM_MODIFIABLE__TABLE_TYPE_MASSAIRFLOWSENSORLS1 0
#define TS_FIXED1DTABLE_ITEM_MODIFIABLE__TABLE_TYPE_MASSAIRFLOWSENSORLS6 1
#define TS_FIXED1DTABLE_ITEM_MODIFIABLE__TABLE_TYPE_COUNT_               2
typedef struct tag_ConfigurationFixed1DTableItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
    WORD _table_type;
}ConfigurationFixed1DTableItem_modifiable_TS, *pConfigurationFixed1DTableItem_modifiable_TS;

typedef struct tag_ConfigurationPlantHardwareWriterItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
}ConfigurationPlantHardwareWriterItem_modifiable_TS, *pConfigurationPlantHardwareWriterItem_modifiable_TS;

typedef struct tag_ConfigurationDiagnosticCodeItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
}ConfigurationDiagnosticCodeItem_modifiable_TS, *pConfigurationDiagnosticCodeItem_modifiable_TS;

typedef struct tag_ConfigurationLatchItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
}ConfigurationLatchItem_modifiable_TS, *pConfigurationLatchItem_modifiable_TS;

typedef struct tag_ConfigurationLambdaStagedItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
    float primary_fuel_stoich_af;
    float primary_fuel_density;
    float secondary_fuel_stoich_af;
    float secondary_fuel_density;
    BYTE number_of_primary_injectors;
    BYTE number_of_secondary_injectors;
    GenericArray_DTS primary_injector_numbers;
    GenericArray_DTS secondary_injector_numbers;
}ConfigurationLambdaStagedItem_modifiable_TS, *pConfigurationLambdaStagedItem_modifiable_TS;

typedef struct tag_ConfigurationPrivateItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
}ConfigurationPrivateItem_modifiable_TS, *pConfigurationPrivateItem_modifiable_TS;

typedef struct tag_ConfigurationCAN_SimpleTransmitItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
    BYTE CAN_channel;
    DWORD CAN_id;
    GenericArray_DTS data_buffer;
}ConfigurationCAN_SimpleTransmitItem_modifiable_TS, *pConfigurationCAN_SimpleTransmitItem_modifiable_TS;

//      ConfigurationCJ125Item_modifiable_TS.read_latch
#define TS_CJ125_ITEM_MODIFIABLE_READ_LATCH_EDGE_SHIFT            0
#define TS_CJ125_ITEM_MODIFIABLE_READ_LATCH_EDGE_MASK             0x03
#define TS_CJ125_ITEM_MODIFIABLE_READ_LATCH_EDGE_RISING_EDGE      0x01
#define TS_CJ125_ITEM_MODIFIABLE_READ_LATCH_EDGE_FALLING_EDGE     0x02
#define TS_CJ125_ITEM_MODIFIABLE_READ_LATCH_START_STATE_SHIFT     4
#define TS_CJ125_ITEM_MODIFIABLE_READ_LATCH_START_STATE_MASK      0x30
#define TS_CJ125_ITEM_MODIFIABLE_READ_LATCH_START_STATE_ZERO      0x00
#define TS_CJ125_ITEM_MODIFIABLE_READ_LATCH_START_STATE_NON_ZERO  0x10
#define TS_CJ125_ITEM_MODIFIABLE_READ_LATCH_START_STATE_COUNT_    2
//      ConfigurationCJ125Item_modifiable_TS.write_latch
#define TS_CJ125_ITEM_MODIFIABLE_WRITE_LATCH_EDGE_SHIFT           0
#define TS_CJ125_ITEM_MODIFIABLE_WRITE_LATCH_EDGE_MASK            0x03
#define TS_CJ125_ITEM_MODIFIABLE_WRITE_LATCH_EDGE_RISING_EDGE     0x01
#define TS_CJ125_ITEM_MODIFIABLE_WRITE_LATCH_EDGE_FALLING_EDGE    0x02
#define TS_CJ125_ITEM_MODIFIABLE_WRITE_LATCH_START_STATE_SHIFT    4
#define TS_CJ125_ITEM_MODIFIABLE_WRITE_LATCH_START_STATE_MASK     0x30
#define TS_CJ125_ITEM_MODIFIABLE_WRITE_LATCH_START_STATE_ZERO     0x00
#define TS_CJ125_ITEM_MODIFIABLE_WRITE_LATCH_START_STATE_NON_ZERO 0x10
#define TS_CJ125_ITEM_MODIFIABLE_WRITE_LATCH_START_STATE_COUNT_   2
typedef struct tag_ConfigurationCJ125Item_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
    BYTE read_latch;
    BYTE write_latch;
}ConfigurationCJ125Item_modifiable_TS, *pConfigurationCJ125Item_modifiable_TS;

//      ConfigurationEALEventItem_modifiable_TS.event_latch
#define TS_EALEVENT_ITEM_MODIFIABLE_EVENT_LATCH_EDGE_SHIFT                      0
#define TS_EALEVENT_ITEM_MODIFIABLE_EVENT_LATCH_EDGE_MASK                       0x03
#define TS_EALEVENT_ITEM_MODIFIABLE_EVENT_LATCH_EDGE_RISING_EDGE                0x01
#define TS_EALEVENT_ITEM_MODIFIABLE_EVENT_LATCH_EDGE_FALLING_EDGE               0x02
#define TS_EALEVENT_ITEM_MODIFIABLE_EVENT_LATCH_START_STATE_SHIFT               4
#define TS_EALEVENT_ITEM_MODIFIABLE_EVENT_LATCH_START_STATE_MASK                0x30
#define TS_EALEVENT_ITEM_MODIFIABLE_EVENT_LATCH_START_STATE_ZERO                0x00
#define TS_EALEVENT_ITEM_MODIFIABLE_EVENT_LATCH_START_STATE_NON_ZERO            0x10
#define TS_EALEVENT_ITEM_MODIFIABLE_EVENT_LATCH_START_STATE_COUNT_              2
#define TS_EALEVENT_ITEM_MODIFIABLE_EVENT_LATCH_INITIALIZED_SHIFT               6
#define TS_EALEVENT_ITEM_MODIFIABLE_EVENT_LATCH_INITIALIZED_MASK                0x40
#define TS_EALEVENT_ITEM_MODIFIABLE_EVENT_LATCH_INITIALIZED__                   0x40
//      ConfigurationEALEventItem_modifiable_TS.event_type
#define TS_EALEVENT_ITEM_MODIFIABLE_EVENT_TYPE_INJECTOR_EVENT_SHIFT             0
#define TS_EALEVENT_ITEM_MODIFIABLE_EVENT_TYPE_INJECTOR_EVENT_MASK              0x01
#define TS_EALEVENT_ITEM_MODIFIABLE_EVENT_TYPE_INJECTOR_EVENT__                 0x01
#define TS_EALEVENT_ITEM_MODIFIABLE_EVENT_TYPE_SPARK_EVENT_SHIFT                1
#define TS_EALEVENT_ITEM_MODIFIABLE_EVENT_TYPE_SPARK_EVENT_MASK                 0x02
#define TS_EALEVENT_ITEM_MODIFIABLE_EVENT_TYPE_SPARK_EVENT__                    0x02
#define TS_EALEVENT_ITEM_MODIFIABLE_EVENT_TYPE_SAVE_DATA_AND_COMMIT_EVENT_SHIFT 2
#define TS_EALEVENT_ITEM_MODIFIABLE_EVENT_TYPE_SAVE_DATA_AND_COMMIT_EVENT_MASK  0x04
#define TS_EALEVENT_ITEM_MODIFIABLE_EVENT_TYPE_SAVE_DATA_AND_COMMIT_EVENT__     0x04
typedef struct tag_ConfigurationEALEventItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
    BYTE event_latch;
    BYTE event_type;
    BYTE event_index;
    GenericArray_DTS save_data;
}ConfigurationEALEventItem_modifiable_TS, *pConfigurationEALEventItem_modifiable_TS;

//      ConfigurationHIP9011Item_modifiable_TS.write_latch
#define TS_HIP9011_ITEM_MODIFIABLE_WRITE_LATCH_EDGE_SHIFT           0
#define TS_HIP9011_ITEM_MODIFIABLE_WRITE_LATCH_EDGE_MASK            0x03
#define TS_HIP9011_ITEM_MODIFIABLE_WRITE_LATCH_EDGE_RISING_EDGE     0x01
#define TS_HIP9011_ITEM_MODIFIABLE_WRITE_LATCH_EDGE_FALLING_EDGE    0x02
#define TS_HIP9011_ITEM_MODIFIABLE_WRITE_LATCH_START_STATE_SHIFT    4
#define TS_HIP9011_ITEM_MODIFIABLE_WRITE_LATCH_START_STATE_MASK     0x30
#define TS_HIP9011_ITEM_MODIFIABLE_WRITE_LATCH_START_STATE_ZERO     0x00
#define TS_HIP9011_ITEM_MODIFIABLE_WRITE_LATCH_START_STATE_NON_ZERO 0x10
#define TS_HIP9011_ITEM_MODIFIABLE_WRITE_LATCH_START_STATE_COUNT_   2
typedef struct tag_ConfigurationHIP9011Item_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
    BYTE write_latch;
    BYTE bandpassfilterfrequency;
    BYTE gaincontrol;
    BYTE integratortimeconstant;
    BYTE test;
    BYTE prescalar;
}ConfigurationHIP9011Item_modifiable_TS, *pConfigurationHIP9011Item_modifiable_TS;

typedef struct tag_ConfigurationPlaybackItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
}ConfigurationPlaybackItem_modifiable_TS, *pConfigurationPlaybackItem_modifiable_TS;

//      ConfigurationCommunicationSimpleItem_modifiable_TS.data_type
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_DATA_TYPE_FLOAT_2_INT8                                      0
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_DATA_TYPE_FLOAT_2_INT16                                     1
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_DATA_TYPE_FLOAT_2_INT32                                     2
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_DATA_TYPE_FLOAT_2_FLOAT                                     3
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_DATA_TYPE_UINT32_2_INT8                                     4
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_DATA_TYPE_UINT32_2_INT16                                    5
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_DATA_TYPE_UINT32_2_INT32                                    6
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_DATA_TYPE_UINT32_2_FLOAT                                    7
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_DATA_TYPE_INT32_2_INT8                                      8
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_DATA_TYPE_INT32_2_INT16                                     9
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_DATA_TYPE_INT32_2_INT32                                     10
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_DATA_TYPE_INT32_2_FLOAT                                     11
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_DATA_TYPE_UINT16_2_INT32                                    12
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_DATA_TYPE_UINT16_2_FLOAT                                    13
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_DATA_TYPE_INT16_2_INT32                                     14
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_DATA_TYPE_INT16_2_FLOAT                                     15
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_DATA_TYPE_UINT8_2_INT32                                     16
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_DATA_TYPE_UINT8_2_FLOAT                                     17
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_DATA_TYPE_INT8_2_INT32                                      18
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_DATA_TYPE_INT8_2_FLOAT                                      19
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_DATA_TYPE_COUNT_                                            20
//      ConfigurationCommunicationSimpleItem_modifiable_TS.channel_bus_override
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_TYPE_SHIFT                         0
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_TYPE_MASK                          0x01
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_TYPE_CAN                           0x00
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_TYPE_SERIAL                        0x01
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_TYPE_COUNT_                        2
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_CHANNEL_SHIFT                      1
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_CHANNEL_MASK                       0x02
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_CHANNEL_CHANNELA                   0x00
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_CHANNEL_CHANNELB                   0x02
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_CHANNEL_COUNT_                     2
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_DIRECTION_SHIFT                    2
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_DIRECTION_MASK                     0x04
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_DIRECTION_TRANSMIT                 0x00
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_DIRECTION_RECEIVE                  0x04
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_DIRECTION_COUNT_                   2
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_CAN_TYPE_SHIFT                         3
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_CAN_TYPE_MASK                          0x08
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_CAN_TYPE_STANDARD_FORMAT               0x00
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_CAN_TYPE_EXTENDED_FORMAT               0x08
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_CAN_TYPE_COUNT_                        2
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_CAN_8BYTE_PER_CONTIGUOUS_ADDRESS_SHIFT 4
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_CAN_8BYTE_PER_CONTIGUOUS_ADDRESS_MASK  0x10
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_CAN_8BYTE_PER_CONTIGUOUS_ADDRESS__     0x10
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_INPUT_OVERRIDE_SHIFT                   5
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_INPUT_OVERRIDE_MASK                    0x20
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_INPUT_OVERRIDE__                       0x20
//      ConfigurationCommunicationSimpleItem_modifiable_TS.id_dataformat
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_ID_DATAFORMAT_DATA_BITS_SHIFT                               0
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_ID_DATAFORMAT_DATA_BITS_MASK                                0x00000003
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_ID_DATAFORMAT_DATA_BITS_BITS7                               0x00000000
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_ID_DATAFORMAT_DATA_BITS_BITS8                               0x00000001
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_ID_DATAFORMAT_DATA_BITS_COUNT_                              2
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_ID_DATAFORMAT_PARITY_SHIFT                                  2
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_ID_DATAFORMAT_PARITY_MASK                                   0x0000000C
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_ID_DATAFORMAT_PARITY_PARITY_NONE                            0x00000000
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_ID_DATAFORMAT_PARITY_PARITY_EVEN                            0x00000004
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_ID_DATAFORMAT_PARITY_PARITY_ODD                             0x00000008
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_ID_DATAFORMAT_PARITY_COUNT_                                 3
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_ID_DATAFORMAT_STOP_BITS_SHIFT                               4
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_ID_DATAFORMAT_STOP_BITS_MASK                                0x00000010
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_ID_DATAFORMAT_STOP_BITS_STOPBITS1                           0x00000000
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_ID_DATAFORMAT_STOP_BITS_STOPBITS2                           0x00000010
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_ID_DATAFORMAT_STOP_BITS_COUNT_                              2
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_ID_DATAFORMAT_PCLK_DIV_SHIFT                                5
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_ID_DATAFORMAT_PCLK_DIV_MASK                                 0x00000060
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_ID_DATAFORMAT_PCLK_DIV_PCLK_DIV_1                           0x00000000
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_ID_DATAFORMAT_PCLK_DIV_PCLK_DIV_4                           0x00000020
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_ID_DATAFORMAT_PCLK_DIV_PCLK_DIV_16                          0x00000040
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_ID_DATAFORMAT_PCLK_DIV_PCLK_DIV_64                          0x00000060
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_ID_DATAFORMAT_PCLK_DIV_COUNT_                               4
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_ID_DATAFORMAT_BAUDRATEGEN_N_SHIFT                           8
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_ID_DATAFORMAT_BAUDRATEGEN_N_MASK                            0x0000FF00
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_ID_DATAFORMAT_CAN_ID_SHIFT                                  0
#define TS_COMMUNICATIONSIMPLE_ITEM_MODIFIABLE_ID_DATAFORMAT_CAN_ID_MASK                                   0xFFFFFFFF
typedef struct tag_ConfigurationCommunicationSimpleItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
    BYTE channel_bus_override;
    DWORD id_dataformat;
    GenericArray_DTS input_overrides;
    GenericArray_DTS data_type;
    GenericArray_DTS data_min_value;
    GenericArray_DTS data_max_value;
    GenericArray_DTS data_buffer;
}ConfigurationCommunicationSimpleItem_modifiable_TS, *pConfigurationCommunicationSimpleItem_modifiable_TS;

typedef struct tag_ConfigurationModelIDItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
    GenericArray_DTS str0;
    GenericArray_DTS str1;
    GenericArray_DTS str2;
    GenericArray_DTS str3;
}ConfigurationModelIDItem_modifiable_TS, *pConfigurationModelIDItem_modifiable_TS;

//      ConfigurationCANPacketItem_modifiable_TS.data_type
#define TS_CANPACKET_ITEM_MODIFIABLE_DATA_TYPE_FLOAT_2_INT8                      0
#define TS_CANPACKET_ITEM_MODIFIABLE_DATA_TYPE_FLOAT_2_INT16                     1
#define TS_CANPACKET_ITEM_MODIFIABLE_DATA_TYPE_FLOAT_2_INT32                     2
#define TS_CANPACKET_ITEM_MODIFIABLE_DATA_TYPE_FLOAT_2_FLOAT                     3
#define TS_CANPACKET_ITEM_MODIFIABLE_DATA_TYPE_UINT32_2_INT8                     4
#define TS_CANPACKET_ITEM_MODIFIABLE_DATA_TYPE_UINT32_2_INT16                    5
#define TS_CANPACKET_ITEM_MODIFIABLE_DATA_TYPE_UINT32_2_INT32                    6
#define TS_CANPACKET_ITEM_MODIFIABLE_DATA_TYPE_UINT32_2_FLOAT                    7
#define TS_CANPACKET_ITEM_MODIFIABLE_DATA_TYPE_INT32_2_INT8                      8
#define TS_CANPACKET_ITEM_MODIFIABLE_DATA_TYPE_INT32_2_INT16                     9
#define TS_CANPACKET_ITEM_MODIFIABLE_DATA_TYPE_INT32_2_INT32                     10
#define TS_CANPACKET_ITEM_MODIFIABLE_DATA_TYPE_INT32_2_FLOAT                     11
#define TS_CANPACKET_ITEM_MODIFIABLE_DATA_TYPE_UINT16_2_INT32                    12
#define TS_CANPACKET_ITEM_MODIFIABLE_DATA_TYPE_UINT16_2_FLOAT                    13
#define TS_CANPACKET_ITEM_MODIFIABLE_DATA_TYPE_INT16_2_INT32                     14
#define TS_CANPACKET_ITEM_MODIFIABLE_DATA_TYPE_INT16_2_FLOAT                     15
#define TS_CANPACKET_ITEM_MODIFIABLE_DATA_TYPE_UINT8_2_INT32                     16
#define TS_CANPACKET_ITEM_MODIFIABLE_DATA_TYPE_UINT8_2_FLOAT                     17
#define TS_CANPACKET_ITEM_MODIFIABLE_DATA_TYPE_INT8_2_INT32                      18
#define TS_CANPACKET_ITEM_MODIFIABLE_DATA_TYPE_INT8_2_FLOAT                      19
#define TS_CANPACKET_ITEM_MODIFIABLE_DATA_TYPE_FLOAT_2_UINT8                     20
#define TS_CANPACKET_ITEM_MODIFIABLE_DATA_TYPE_FLOAT_2_UINT16                    21
#define TS_CANPACKET_ITEM_MODIFIABLE_DATA_TYPE_FLOAT_2_UINT32                    22
#define TS_CANPACKET_ITEM_MODIFIABLE_DATA_TYPE_FLOAT_2_SIGNMAG8                  23
#define TS_CANPACKET_ITEM_MODIFIABLE_DATA_TYPE_FLOAT_2_SIGNMAG16                 24
#define TS_CANPACKET_ITEM_MODIFIABLE_DATA_TYPE_FLOAT_2_SIGNMAG32                 25
#define TS_CANPACKET_ITEM_MODIFIABLE_DATA_TYPE_SIGNMAG8_2_FLOAT                  26
#define TS_CANPACKET_ITEM_MODIFIABLE_DATA_TYPE_SIGNMAG16_2_FLOAT                 27
#define TS_CANPACKET_ITEM_MODIFIABLE_DATA_TYPE_SIGNMAG32_2_FLOAT                 28
#define TS_CANPACKET_ITEM_MODIFIABLE_DATA_TYPE_COUNT_                            29
//      ConfigurationCANPacketItem_modifiable_TS.channel_bus_override
#define TS_CANPACKET_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_CHANNEL_SHIFT      1
#define TS_CANPACKET_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_CHANNEL_MASK       0x02
#define TS_CANPACKET_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_CHANNEL_CHANNELA   0x00
#define TS_CANPACKET_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_CHANNEL_CHANNELB   0x02
#define TS_CANPACKET_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_CHANNEL_COUNT_     2
#define TS_CANPACKET_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_DIRECTION_SHIFT    2
#define TS_CANPACKET_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_DIRECTION_MASK     0x04
#define TS_CANPACKET_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_DIRECTION_TRANSMIT 0x00
#define TS_CANPACKET_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_DIRECTION_RECEIVE  0x04
#define TS_CANPACKET_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_DIRECTION_COUNT_   2
#define TS_CANPACKET_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_MODE_TX_SHIFT          3
#define TS_CANPACKET_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_MODE_TX_MASK           0x08
#define TS_CANPACKET_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_MODE_TX_PERIODIC       0x00
#define TS_CANPACKET_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_MODE_TX_EVENT          0x08
#define TS_CANPACKET_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_MODE_TX_COUNT_         2
//      ConfigurationCANPacketItem_modifiable_TS.event_latch
#define TS_CANPACKET_ITEM_MODIFIABLE_EVENT_LATCH_EDGE_SHIFT                      0
#define TS_CANPACKET_ITEM_MODIFIABLE_EVENT_LATCH_EDGE_MASK                       0x03
#define TS_CANPACKET_ITEM_MODIFIABLE_EVENT_LATCH_EDGE_RISING_EDGE                0x01
#define TS_CANPACKET_ITEM_MODIFIABLE_EVENT_LATCH_EDGE_FALLING_EDGE               0x02
#define TS_CANPACKET_ITEM_MODIFIABLE_EVENT_LATCH_START_STATE_SHIFT               4
#define TS_CANPACKET_ITEM_MODIFIABLE_EVENT_LATCH_START_STATE_MASK                0x30
#define TS_CANPACKET_ITEM_MODIFIABLE_EVENT_LATCH_START_STATE_ZERO                0x00
#define TS_CANPACKET_ITEM_MODIFIABLE_EVENT_LATCH_START_STATE_NON_ZERO            0x10
#define TS_CANPACKET_ITEM_MODIFIABLE_EVENT_LATCH_START_STATE_COUNT_              2
#define TS_CANPACKET_ITEM_MODIFIABLE_EVENT_LATCH_INITIALIZED_SHIFT               6
#define TS_CANPACKET_ITEM_MODIFIABLE_EVENT_LATCH_INITIALIZED_MASK                0x40
#define TS_CANPACKET_ITEM_MODIFIABLE_EVENT_LATCH_INITIALIZED__                   0x40
typedef struct tag_ConfigurationCANPacketItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
    GenericArray_DTS addresses;
    GenericArray_DTS data_min_value;
    GenericArray_DTS data_max_value;
    GenericArray_DTS internal_input_data_pointers;
    GenericArray_DTS internal_inputs;
    GenericArray_DTS suggested_iteration_count;
    GenericArray_DTS data_shift;
    GenericArray_DTS data_bits;
    GenericArray_DTS data_type;
    BYTE channel_bus_override;
    BYTE event_latch;
}ConfigurationCANPacketItem_modifiable_TS, *pConfigurationCANPacketItem_modifiable_TS;

//      ConfigurationSerialStreamItem_modifiable_TS.data_type
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_TYPE_FLOAT_2_INT8                      0
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_TYPE_FLOAT_2_INT16                     1
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_TYPE_FLOAT_2_INT32                     2
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_TYPE_FLOAT_2_FLOAT                     3
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_TYPE_UINT32_2_INT8                     4
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_TYPE_UINT32_2_INT16                    5
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_TYPE_UINT32_2_INT32                    6
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_TYPE_UINT32_2_FLOAT                    7
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_TYPE_INT32_2_INT8                      8
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_TYPE_INT32_2_INT16                     9
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_TYPE_INT32_2_INT32                     10
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_TYPE_INT32_2_FLOAT                     11
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_TYPE_UINT16_2_INT32                    12
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_TYPE_UINT16_2_FLOAT                    13
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_TYPE_INT16_2_INT32                     14
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_TYPE_INT16_2_FLOAT                     15
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_TYPE_UINT8_2_INT32                     16
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_TYPE_UINT8_2_FLOAT                     17
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_TYPE_INT8_2_INT32                      18
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_TYPE_INT8_2_FLOAT                      19
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_TYPE_FLOAT_2_UINT8                     20
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_TYPE_FLOAT_2_UINT16                    21
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_TYPE_FLOAT_2_UINT32                    22
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_TYPE_FLOAT_2_SIGNMAG8                  23
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_TYPE_FLOAT_2_SIGNMAG16                 24
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_TYPE_FLOAT_2_SIGNMAG32                 25
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_TYPE_SIGNMAG8_2_FLOAT                  26
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_TYPE_SIGNMAG16_2_FLOAT                 27
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_TYPE_SIGNMAG32_2_FLOAT                 28
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_TYPE_COUNT_                            29
//      ConfigurationSerialStreamItem_modifiable_TS.data_format
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_FORMAT_DATA_BITS_SHIFT                 0
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_FORMAT_DATA_BITS_MASK                  0x00000003
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_FORMAT_DATA_BITS_BITS7                 0x00000000
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_FORMAT_DATA_BITS_BITS8                 0x00000001
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_FORMAT_DATA_BITS_COUNT_                2
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_FORMAT_PARITY_SHIFT                    2
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_FORMAT_PARITY_MASK                     0x0000000C
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_FORMAT_PARITY_PARITY_NONE              0x00000000
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_FORMAT_PARITY_PARITY_EVEN              0x00000004
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_FORMAT_PARITY_PARITY_ODD               0x00000008
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_FORMAT_PARITY_COUNT_                   3
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_FORMAT_STOP_BITS_SHIFT                 4
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_FORMAT_STOP_BITS_MASK                  0x00000010
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_FORMAT_STOP_BITS_STOPBITS1             0x00000000
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_FORMAT_STOP_BITS_STOPBITS2             0x00000010
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_FORMAT_STOP_BITS_COUNT_                2
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_FORMAT_PCLK_DIV_SHIFT                  5
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_FORMAT_PCLK_DIV_MASK                   0x00000060
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_FORMAT_PCLK_DIV_PCLK_DIV_1             0x00000000
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_FORMAT_PCLK_DIV_PCLK_DIV_4             0x00000020
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_FORMAT_PCLK_DIV_PCLK_DIV_16            0x00000040
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_FORMAT_PCLK_DIV_PCLK_DIV_64            0x00000060
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_FORMAT_PCLK_DIV_COUNT_                 4
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_FORMAT_BAUDRATEGEN_N_SHIFT             8
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_DATA_FORMAT_BAUDRATEGEN_N_MASK              0x0000FF00
//      ConfigurationSerialStreamItem_modifiable_TS.event_latch
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_EVENT_LATCH_EDGE_SHIFT                      0
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_EVENT_LATCH_EDGE_MASK                       0x03
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_EVENT_LATCH_EDGE_RISING_EDGE                0x01
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_EVENT_LATCH_EDGE_FALLING_EDGE               0x02
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_EVENT_LATCH_START_STATE_SHIFT               4
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_EVENT_LATCH_START_STATE_MASK                0x30
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_EVENT_LATCH_START_STATE_ZERO                0x00
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_EVENT_LATCH_START_STATE_NON_ZERO            0x10
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_EVENT_LATCH_START_STATE_COUNT_              2
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_EVENT_LATCH_INITIALIZED_SHIFT               6
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_EVENT_LATCH_INITIALIZED_MASK                0x40
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_EVENT_LATCH_INITIALIZED__                   0x40
//      ConfigurationSerialStreamItem_modifiable_TS.channel_bus_override
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_CHANNEL_SHIFT      1
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_CHANNEL_MASK       0x02
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_CHANNEL_CHANNELA   0x00
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_CHANNEL_CHANNELB   0x02
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_CHANNEL_COUNT_     2
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_DIRECTION_SHIFT    2
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_DIRECTION_MASK     0x04
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_DIRECTION_TRANSMIT 0x00
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_DIRECTION_RECEIVE  0x04
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_BUS_DIRECTION_COUNT_   2
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_MODE_TX_SHIFT          3
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_MODE_TX_MASK           0x08
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_MODE_TX_PERIODIC       0x00
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_MODE_TX_EVENT          0x08
#define TS_SERIALSTREAM_ITEM_MODIFIABLE_CHANNEL_BUS_OVERRIDE_MODE_TX_COUNT_         2
typedef struct tag_ConfigurationSerialStreamItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
    GenericArray_DTS internal_inputs;
    GenericArray_DTS internal_input_data_pointers;
    GenericArray_DTS data_min_value;
    GenericArray_DTS data_max_value;
    GenericArray_DTS data_shift;
    GenericArray_DTS data_bits;
    GenericArray_DTS data_valid;
    GenericArray_DTS data_type;
    DWORD data_format;
    GenericArray_DTS data_buffer;
    WORD stream_length;
    BYTE event_latch;
    BYTE channel_bus_override;
}ConfigurationSerialStreamItem_modifiable_TS, *pConfigurationSerialStreamItem_modifiable_TS;

typedef struct tag_ConfigurationEngineTimingGeneratorItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
}ConfigurationEngineTimingGeneratorItem_modifiable_TS, *pConfigurationEngineTimingGeneratorItem_modifiable_TS;

typedef struct tag_ConfigurationHwPlaceHolderItem_modifiable_TS
{
    ConfigurationItemHeader_modifiable_TS header;
}ConfigurationHwPlaceHolderItem_modifiable_TS, *pConfigurationHwPlaceHolderItem_modifiable_TS;

typedef struct tag_GenericStatusStringResponse_DTS
{
    DWORD            status;
    GenericArray_DTS str;
    BYTE             var_data_size;
    BYTE             var_data_count_h;
    BYTE             var_data_count_l;
    DTS_pointer var;
} GenericStatusStringResponse_DTS, *pGenericStatusStringResponse_DTS;

// Harness Connector designators.
#define BLACKFOOT_J8   0
#define BLACKFOOT_J9   35
#define BLACKFOOT_J10  70

#define BITTERROOT_CONNECTOR1   0
#define BITTERROOT_CONNECTOR2   35
#define BITTERROOT_CONNECTOR3   70
#define BITTERROOT_CONNECTOR4   105

#define BITTERROOT2_CONNECTOR1   0
#define BITTERROOT2_CONNECTOR2   35
#define BITTERROOT2_CONNECTOR3   70
#define BITTERROOT2_CONNECTOR4   105

#define MORESBY_CONNECTOR1   0
#define MORESBY_CONNECTOR2   48
#define MORESBY_COLA   0
#define MORESBY_COLB   4
#define MORESBY_COLC   8
#define MORESBY_COLD   12
#define MORESBY_COLE   16
#define MORESBY_COLF   20
#define MORESBY_COLG   24
#define MORESBY_COLH   28
#define MORESBY_COLJ   32
#define MORESBY_COLK   36
#define MORESBY_COLL   40
#define MORESBY_COLM   44

#define INFINITY10_CONNECTOR1   0
#define INFINITY10_CONNECTOR2   72

#define VENICE_CONNECTOR        0

#define HUDSON_CONNECTOR1   0
#define HUDSON_CONNECTOR2   72

#define TS_PERIPHERAL_HARNESSPINDESCRIPTOR_PIN_NAME_LENGTH                                           40
#define TS_PERIPHERAL_HARNESSPINDESCRIPTOR_PIN_END                                                   0x00000000
#define TS_PERIPHERAL_HARNESSPINDESCRIPTOR_HARNESS_PIN_STRING_LENGTH                                 8
//      Peripheral_HarnessPinDescriptor.Attributes
#define TS_PERIPHERAL_HARNESSPINDESCRIPTOR_ATTRIBUTES_IS_RELAY_CONTROL_SHIFT                         0
#define TS_PERIPHERAL_HARNESSPINDESCRIPTOR_ATTRIBUTES_IS_RELAY_CONTROL_MASK                          0x01
#define TS_PERIPHERAL_HARNESSPINDESCRIPTOR_ATTRIBUTES_IS_RELAY_CONTROL__                             0x01
#define TS_PERIPHERAL_HARNESSPINDESCRIPTOR_ATTRIBUTES_IS_CRANK_CAM_INPUT_SHIFT                       1
#define TS_PERIPHERAL_HARNESSPINDESCRIPTOR_ATTRIBUTES_IS_CRANK_CAM_INPUT_MASK                        0x02
#define TS_PERIPHERAL_HARNESSPINDESCRIPTOR_ATTRIBUTES_IS_CRANK_CAM_INPUT__                           0x02

typedef struct tag_Peripheral_HarnessPinDescriptorForPlugin_TS
{
    BYTE             HarnessPinNumber;
    BYTE             Attributes;
    BYTE             PinName[TS_PERIPHERAL_HARNESSPINDESCRIPTOR_PIN_NAME_LENGTH];
    BYTE             harness_pin_string[TS_PERIPHERAL_HARNESSPINDESCRIPTOR_HARNESS_PIN_STRING_LENGTH];
} Peripheral_HarnessPinDescriptorForPlugin_TS, *pPeripheral_HarnessPinDescriptorForPlugin_TS;

// Application channel defines.
#define CM_APPLICATION_SETTINGS_KEY_OFF_COMMIT 1

// Engine sync response values
#define TS_ENGINEDESCRIPTOR_ITEM_EAL_SYNC_RESPONSE_IGNORE                                            0
#define TS_ENGINEDESCRIPTOR_ITEM_EAL_SYNC_RESPONSE_RESYNC                                            1
#define TS_ENGINEDESCRIPTOR_ITEM_EAL_SYNC_RESPONSE_SHUTDOWN                                          2

#endif //_TRANSFERSTRUCTS_H_

// Upgrade Hook Commands.  (Plugin Function)
// Negative commands are statements from the main program.
// This statement is sent if the plugin requested hook support, but such support is already taken.
#define UHC_HOOK_NOT_GRANTED             -1
#define UHC_AFTER_NOT_CALLED             -2

#define UHC_HOOK_SUPPORTED                0
#define UHC_BEFORE_UPGRADE                10
#define UHC_AFTER_UPGRADE                 11
#define UHC_BEFORE_IMPORT                 12
#define UHC_AFTER_IMPORT                  13

// Upgrade Hook Status (Responses)
//  This status is reserved for main program use only.  No plugin shall return this value.
#define UHS_RESERVED        -1

#define UHS_SUCCESS         0
#define UHS_YES             UHS_SUCCESS
#define UHS_DONE            UHS_SUCCESS
#define UHS_MODEL_HANDLED   UHS_SUCCESS
#define UHS_CONTINUE        UHS_SUCCESS
#define UHS_ABORT           1
#define UHS_FAILURE         2
#define UHS_NO              UHS_FAILURE
#define UHS_MODEL_UNHANDLED UHS_FAILURE
#define UHS_NOT_SUPPORTED   3

typedef struct _tag_BEFORE_UPGRADE_OPTIONS {
  int password_exists;
  int keep_calibration_data;
} BeforeUpgradeOptions, *pBeforeUpgradeOptions;

typedef struct _tag_AFTER_UPGRADE_OPTIONS {
  int password_exists;
  int keep_calibration_data;
} AfterUpgradeOptions, *pAfterUpgradeOptions;

typedef struct _tag_BEFORE_IMPORT_OPTIONS {
  const char *filepath;
} BeforeImportOptions, *pBeforeImportOptions;

typedef struct _tag_AFTER_IMPORT_OPTIONS {
  const char *filepath;
} AfterImportOptions, *pAfterImportOptions;

/*
No longer supported.
typedef struct _EL_FUNCTION_TABLE
{
  unsigned long version;
  int           (*func_GetModifiableItem)(const char *item_name, ConfigurationItemHeader_modifiable_TS *mod_item);
  int           (*func_SetModifiableItem)(const char *item_name, ConfigurationItemHeader_modifiable_TS *mod_item);
  int           (*func_GetHarnessPin)(BYTE index, pPeripheral_HarnessPinDescriptorForPlugin_TS harness_pin);
  int           (*func_Commit)();
  int           (*func_EAL_stop)();
  int           (*func_EAL_start)();
  int           (*func_Validate)(pGenericStatusStringResponse_DTS pGSSR_DTS);
} ELFunctionTable, *pELFunctionTable;
*/
#endif // _EL_MODIFY_DLL_API_H_

/*** Dockable API ***/
#ifndef EL_DOCKABLE_VERSION
# define EL_DOCKABLE_VERSION 5
#endif

// Dockable Status Values
# define DS_SUCCESS               0
# define DS_TRUE                  0
# define DS_FAILURE               1
# define DS_FALSE                 1
# define DS_REGISTERED            2
# define DS_EXISTS                2
# define DS_INVALID_HOST_CONTEXT  3
# define DS_INVALID_ARGUMENT      4
# define DS_NOT_REGISTERED        5
# define DS_DOES_NOT_EXIST        5
# define DS_NO_MEM                6
# define DS_ACTIVE_CONTROLS       7
# define DS_WINDOW_NOT_REGISTERED 8
# define DS_FILE_NOT_FOUND        9
# define DS_FILE_UPDATE_FAILED    10
# define DS_FILE_INVALID          11
# define DS_NOT_SUPPORTED         12
# define DS_UNSUPPORTED_VERSION   13
# define DS_NO_CONNECTION         14
# define DS_NOT_CONTROL_WINDOW    15
# define DS_INVALID_EXPRESSION    16
# define DS_USER_CANCELED         17
# define DS_INVALID_RESULT        18
# define DS_UNDOCKED              19
# define DS_PINNED                20
# define DS_BUSY                  21
# define DS_NO_CHANNELS           22
# define DS_EMPTY_CHANNEL         23
# define DS_INVALID_CHANNEL       24
# define DS_CONTROL_REGISTERED    25
# define DS_CONTROL_NOT_REGISTERED 26
# define DS_NOT_LAYOUT_WINDOW      27
# define DS_MANAGER_REGISTERED     28
# define DS_MANAGER_NOT_REGISTERED 29
# define DS_NOT_IMPLEMENTED        30
# define DS_INVALID_INPUT          31
# define DS_LOGGING                32
// Some return values that are normal to the old plugin style.
# define DS_BAD_STATE             0x50000002
# define DS_ITEM_NOT_FOUND        0x50000005
# define DS_MODIFY_ITEM_NOT_FOUND 0x50000017

// System Menu Options/Codes
// The lower 4 bits are not used in the system menu due to a windows bug.
# define EL_SC_SHOW_PROPERTIES              0x10
# define EL_SC_SHOW_CHANNEL_LIST            0x20
# define EL_SC_SHOW_TABLE_CONVERSION        0x30
# define EL_SC_SHOW_XAXIS_CONVERSION        0x40
# define EL_SC_SHOW_YAXIS_CONVERSION        0x50
# define EL_SC_SHOW_NUMBER_FORMAT_OPTIONS   0x60
# define EL_SC_SHOW_COLOR_OPTIONS           0x70
# define EL_SC_DUPLICATE_CONTROL            0x80
# define EL_SC_CHANNEL_PROPERTIES           0x90
# define EL_SC_LOG_CHANNEL                  0xA0
# define EL_SC_PLUGIN_START                 0x1000

// RECT should be defined in windows.h but just incase...
# ifdef EL_REQUIRED_RECT_STRUCT
typedef struct RECT {
  long left;
  long top;
  long right;
  long bottom;
} RECT, *PRECT, *pRECT;
# endif

# ifdef EL_REQUIRED_MSG_STRUCT
typedef struct MSG {
  HWND         hwnd;
  UINT         message;
  unsigned int wParam;
  long         lParam;
  DWORD        time;
  POINT        pt;
} MSG, *PMSG, *pMSG;
# endif

# include <d3d9.h>
# include <d3dx9.h>

// Flags used to select primary, x-axis, or y-axis ChannelCommonInfo inside a channel.
# define INFOSELECT_NONE    0
# define INFOSELECT_PRIMARY 1
# define INFOSELECT_X_AXIS  2
# define INFOSELECT_Y_AXIS  4
# define INFOSELECT_ALL     0xFFFFFFFF
typedef unsigned long INFOSELECT;

# define EL_NUMBER_THEME_GRADIENTS 30
typedef struct ELString {
  const UINT capacity;
  UINT size;
  UINT length;
  union {
    const char *str;
    const wchar_t *wstr;
  };
} ELString, *pELString;

typedef struct ELStringArray {
  const BOOL owns_elements;
  const UINT capacity;
  UINT count;
  pELString *elements;
} ELStringArray, *pELStringArray;

typedef struct ELArray {
  const UINT capacity;
  UINT count;
  UINT *elements;
} ELArray, *pELArray;

#  define LOG_NUM_TIMESTEPS 1000
#  define LOG_MAX_TIMESTAMP 0x7FFFFFFFFFFFFFFFui64
typedef long long LOGTIMESTAMP;

typedef struct ELLogInfo {
  const LOGTIMESTAMP max_length;
  LOGTIMESTAMP length;
  LOGTIMESTAMP display_start_time;
  LOGTIMESTAMP display_end_time;
  LOGTIMESTAMP display_cursor;
} ELLogInfo, *pELLogInfo;

typedef struct ELColorTriple {
  COLORREF low;
  COLORREF mid;
  COLORREF high;
} ELColorTriple, *pELColorTriple;

typedef struct ELThemeColors {
  COLORREF background_color;
  COLORREF text_color_primary;
  COLORREF text_light_color;
  COLORREF text_dark_color;
  COLORREF grid_lines_color;
  COLORREF indicator_color;
  COLORREF modified_color;
  ELColorTriple gradient_colors[EL_NUMBER_THEME_GRADIENTS];
} ELThemeColors, *pELThemeColors;

typedef struct ELColorGradient {
  float low_start;
  float low_end;
  float high_start;
  float high_end;
} ELColorGradient, *pELColorGradient;

// NumberFormat format values.
#  define NUMBERFORMAT_NORMAL     0
#  define NUMBERFORMAT_FIXED      1
#  define NUMBERFORMAT_SCIENTIFIC 2

#  define NUMBERFORMAT_MAX_PRECISION 9
typedef UINT NUMBERFORMAT;

typedef struct ELNumberFormat {
  NUMBERFORMAT format;
  UINT precision;
  BOOL show_sign;
} ELNumberFormat, *pELNumberFormat;

typedef struct ELCellInfo {
  UINT size;
  UINT max_size;
  float *data;
  float *base;
} ELCellInfo, *pELCellInfo;

typedef struct ELChannelFormattingInfo {
  ELNumberFormat number_format;
  ELColorGradient color_gradient;
  UINT color_triple_index;
} ELChannelFormattingInfo, *pELChannelFormattingInfo;

typedef struct ELChannelCommonInfo {
  WORD channel;
  WORD dummy;
  UINT base_unit;
  UINT unit;
  ELString name;
  const float *value;
  ELCellInfo cells;
  ELChannelFormattingInfo info;
} ELChannelCommonInfo, *pELChannelCommonInfo;

typedef struct ELChannelLogData {
  const UINT size;
  const float *min_array;
  const float *max_array;
} ELChannelLogData, *pELChannelLogData;

// Channel type flags
// Used to filter operations for only certain item types
// Not to be confused with the actual "type" field of the configuration item header
#  define CHANNELTYPE_SIMPLE          0x00000001
#  define CHANNELTYPE_1DTABLE         0x00000002
#  define CHANNELTYPE_2DTABLE         0x00000004
#  define CHANNELTYPE_ALL_NONVIRTUAL  0x0000FFFF
#  define CHANNELTYPE_VIRTUAL         0x00010000
#  define CHANNELTYPE_ALL             0x00FFFFFF
#  define CHANNELTYPE_HIDDEN          0x01000000
#  define CHANNELTYPE_ALL_WITH_HIDDEN 0xFFFFFFFF
typedef DWORD CHANNELTYPE;

#  define CHANNELFLAGS_NONE         0x00000000
#  define CHANNELFLAGS_VALID        0x00000001
#  define CHANNELFLAGS_FOLLOW_ECU   0x00000002
#  define CHANNELFLAGS_INTERPOLATED 0x00000004
#  define CHANNELFLAGS_LOGGED       0x00000008
#  define CHANNELFLAGS_CONVERTED    0x00000010
typedef DWORD CHANNELFLAGS;

typedef struct ELChannelInfo {
  CHANNELTYPE type;
  CHANNELFLAGS flags;
  ELChannelCommonInfo primary;
  ELChannelLogData log;
  float initial_value;
  float base_initial_value;
  RECT selection;
  ELChannelCommonInfo x_axis;
  ELChannelCommonInfo y_axis;
} ELChannelInfo, *pELChannelInfo;

typedef struct EL3DData {
  LPDIRECT3D9 d3d;
  LPDIRECT3DDEVICE9 device;
  D3DPRESENT_PARAMETERS pp;
  D3DCAPS9 caps;
  LPD3DXMESH font_char_meshes[256];
  ABCFLOAT font_char_ABC_data[256];
} EL3DData, *pEL3DData;

typedef struct ELHostInfo {
  BOOL connected;
  BOOL running;
  BOOL logging;
  BOOL target_logging;
  ELString initial_directory;
  ELString executable_directory;
  ELString documents_directory;
} ELHostInfo, *pELHostInfo;

typedef struct ELVersions {
  DWORD plugin;
  DWORD dockable;
  DWORD target;
  DWORD full_target;
  DWORD configuration;
  DWORD layout;
  DWORD generic_table;
  DWORD dialogs;
  DWORD host;
  DWORD unit_converter;
} ELVersions, *pELVersions;

typedef struct ELHost ELHost, *pELHost;

# if !defined(__cplusplus) || defined(CINTERFACE)
#  define FUNC(p) (p)->lpVtbl
#  define PARAM(p) p
#  define PARAM_(p) p,
# else
#  define FUNC(p) (p)
#  define PARAM(p)
#  define PARAM_(p)
# endif

# define ELWINDOWTYPE_NORMAL   0
# define ELWINDOWTYPE_CONTROL  1
# define ELWINDOWTYPE_LAYOUT   2
typedef UINT ELWINDOWTYPE;

# define HOSTSTATE_NONE           0x00000000
# define HOSTSTATE_CONNECTION     0x00000001
# define HOSTSTATE_PC_LOGGING     0x00000002
# define HOSTSTATE_TARGET_LOGGING 0x00000004
# define HOSTSTATE_TARGET_STATE   0x00000008
# define HOSTSTATE_ALL            0xFFFFFFFF
typedef DWORD HOSTSTATE;

# undef INTERFACE
# define INTERFACE ELWindow
DECLARE_INTERFACE(ELWindow)
{
  STDMETHOD_(pELHost, Host)(THIS) PURE;
  STDMETHOD_(ELWINDOWTYPE, Type)(THIS) PURE;
  STDMETHOD_(void, Destroy)(THIS) PURE;
  STDMETHOD_(HWND, GetHWND)(THIS) PURE;
  STDMETHOD_(BOOL, CanResize)(THIS_ RECT *) PURE;
  STDMETHOD_(BOOL, IsSavable)(THIS) PURE;
  STDMETHOD_(void, BeginModal)(THIS) PURE;
  STDMETHOD_(void, EndModal)(THIS) PURE;
  STDMETHOD_(const char *, TypeName)(THIS) PURE;
  STDMETHOD_(void, LoadSettingsFromString)(THIS_ const char *) PURE;
  STDMETHOD_(pELString, SaveSettingsToString)(THIS) PURE;
  STDMETHOD_(void, GetStrings)(THIS_ pELStringArray *, BOOL *) PURE;
  STDMETHOD_(void, SetStrings)(THIS_ pELStringArray) PURE;  
  STDMETHOD_(void, ThemeChanged)(THIS_ const pELThemeColors) PURE;
  STDMETHOD_(void, HostStateChanged)(THIS_ const pELHostInfo host, HOSTSTATE states_changed) PURE;
  STDMETHOD_(void, ApplicationOptionsChanged)(THIS) PURE;
};
typedef ELWindow *pELWindow;

# if defined(__cplusplus)
// Helper struct useful if not inheriting directly from ELWindow
template<typename _Class>
struct my_window : public ELWindow {
  my_window() {}
  STDMETHODIMP_(pELHost) Host(void) { return _data->Host(); }
  STDMETHODIMP_(ELWINDOWTYPE) Type(void) { return _data->Type(); }
  STDMETHODIMP_(void) Destroy(void) { _data->Destroy(); }
  STDMETHODIMP_(HWND) GetHWND(void) { return _data->GetHWND(); }
  STDMETHODIMP_(BOOL) CanResize(RECT *new_rect) { return _data->CanResize(new_rect); }
  STDMETHODIMP_(BOOL) IsSavable(void) { return _data->IsSavable(); }
  STDMETHODIMP_(void) BeginModal(void) { _data->BeginModal(); }
  STDMETHODIMP_(void) EndModal(void) { _data->EndModal(); }
  STDMETHODIMP_(const char *) TypeName(void) { return _data->TypeName(); }
  STDMETHODIMP_(void) LoadSettingsFromString(const char *settings) { _data->LoadSettingsFromString(settings); }
  STDMETHODIMP_(pELString) SaveSettingsToString(void) { return _data->SaveSettingsToString(); }
  STDMETHODIMP_(void) GetStrings(pELStringArray *sa, BOOL *release) { _data->GetStrings(sa, release); }
  STDMETHODIMP_(void) SetStrings(pELStringArray sa) { _data->SetStrings(sa); }
  STDMETHODIMP_(void) ThemeChanged(const pELThemeColors theme) { _data->ThemeChanged(theme); }
  STDMETHODIMP_(void) HostStateChanged(const pELHostInfo host, HOSTSTATE states_changed) { _data->HostStateChanged(host, states_changed); }
  STDMETHODIMP_(void) ApplicationOptionsChanged(void) { _data->ApplicationOptionsChanged(); }
  _Class *_data;
};
# endif

# ifndef EL_IGNORE_HELPER_MACROS
#  define ELWindow_Host(p)                      FUNC(p)->Host(PARAM(p))
#  define ELWindow_Type(p)                      FUNC(p)->Type(PARAM(p))
#  define ELWindow_Destroy(p)                   FUNC(p)->Destroy(PARAM(p))
#  define ELWindow_GetHWND(p)                   FUNC(p)->GetHWND(PARAM(p))
#  define ELWindow_CanResize(p, a)              FUNC(p)->CanResize(PARAM_(p) a)
#  define ELWindow_IsSavable(p)                 FUNC(p)->IsSavable(PARAM(p))
#  define ELWindow_BeginModal(p)                FUNC(p)->BeginModal(PARAM(p))
#  define ELWindow_EndModal(p)                  FUNC(p)->EndModal(PARAM(p))
#  define ELWindow_TypeName(p)                  FUNC(p)->TypeName(PARAM(p))
#  define ELWindow_LoadSettingsFromString(p, a) FUNC(p)->LoadSettingsFromString(PARAM_(p) a)
#  define ELWindow_SaveSettingsToString(p)      FUNC(p)->SaveSettingToString(PARAM(p))
#  define ELWindow_GetStrings(p, a, b)          FUNC(p)->GetStrings(PARAM_(p) a, b)
#  define ELWindow_SetStrings(p, a)             FUNC(p)->SetStrings(PARAM_(p) a)
#  define ELWindow_ThemeChanged(p, a)           FUNC(p)->ThemeChanged(PARAM_(p) a)
#  define ELWindow_HostStateChanged(p, a, b)       FUNC(p)->HostStateChanged(PARAM_(p) a, b)
#  define ELWindow_ApplicationOptionsChanged(p) FUNC(p)->ApplicationOptionsChanged(PARAM(p))
# endif

typedef struct ELControl ELControl, *pELControl;

# undef INTERFACE
# define INTERFACE ELControlWindow
DECLARE_INTERFACE_(ELControlWindow, ELWindow)
{
  // Base functions
  STDMETHOD_(pELHost, Host)(THIS) PURE;
  STDMETHOD_(ELWINDOWTYPE, Type)(THIS) PURE;
  STDMETHOD_(void, Destroy)(THIS) PURE;
  STDMETHOD_(HWND, GetHWND)(THIS) PURE;
  STDMETHOD_(BOOL, CanResize)(THIS_ RECT *) PURE;
  STDMETHOD_(BOOL, IsSavable)(THIS) PURE;
  STDMETHOD_(void, BeginModal)(THIS) PURE;
  STDMETHOD_(void, EndModal)(THIS) PURE;
  STDMETHOD_(const char *, TypeName)(THIS) PURE;
  STDMETHOD_(void, LoadSettingsFromString)(THIS_ const char *) PURE;
  STDMETHOD_(pELString, SaveSettingsToString)(THIS) PURE;
  STDMETHOD_(void, GetStrings)(THIS_ pELStringArray *, BOOL *) PURE;
  STDMETHOD_(void, SetStrings)(THIS_ pELStringArray) PURE;  
  STDMETHOD_(void, ThemeChanged)(THIS_ const pELThemeColors) PURE;
  STDMETHOD_(void, HostStateChanged)(THIS_ const pELHostInfo, HOSTSTATE states_changed) PURE;
  STDMETHOD_(void, ApplicationOptionsChanged)(THIS) PURE;

  // Our functions
  STDMETHOD_(pELControl, Control)(THIS) PURE;
  STDMETHOD_(void, DestroyHWND)(THIS) PURE;
  STDMETHOD_(HWND, CreateHWND)(THIS_ HWND) PURE;
};
typedef struct ELControlWindow ELControlWindow, *pELControlWindow;

# if defined(__cplusplus)
template<typename _Class>
struct my_control_window : public ELControlWindow {
  my_control_window() {}
  // Base functions
  STDMETHODIMP_(pELHost) Host(void) { return _data->Host(); }
  STDMETHODIMP_(ELWINDOWTYPE) Type(void) { return ELWINDOWTYPE_CONTROL; }
  STDMETHODIMP_(void) Destroy(void) { _data->Destroy(); }
  STDMETHODIMP_(HWND) GetHWND(void) { return _data->GetHWND(); }
  STDMETHODIMP_(BOOL) CanResize(RECT *new_rect) { return _data->CanResize(new_rect); }
  STDMETHODIMP_(BOOL) IsSavable(void) { return TRUE; }
  STDMETHODIMP_(void) BeginModal(void) { _data->BeginModal(); }
  STDMETHODIMP_(void) EndModal(void) { _data->EndModal(); }
  STDMETHODIMP_(const char *) TypeName(void) { return _data->TypeName(); }
  STDMETHODIMP_(void) LoadSettingsFromString(const char *settings) { _data->LoadSettingsFromString(settings); }
  STDMETHODIMP_(pELString) SaveSettingsToString(void) { return _data->SaveSettingsToString(); }
  STDMETHODIMP_(void) GetStrings(pELStringArray *sa, BOOL *release) { _data->GetStrings(sa, release); }
  STDMETHODIMP_(void) SetStrings(pELStringArray sa) { _data->SetStrings(sa); }
  STDMETHODIMP_(void) ThemeChanged(const pELThemeColors theme) { _data->ThemeChanged(theme); }
  STDMETHODIMP_(void) HostStateChanged(const pELHostInfo host, HOSTSTATE states_changed) { _data->HostStateChanged(host, states_changed); }
  STDMETHODIMP_(void) ApplicationOptionsChanged(void) { _data->ApplicationOptionsChanged(); }
  // Our functions
  STDMETHODIMP_(pELControl) Control(void) { return _data->Control(); }
  STDMETHODIMP_(void) DestroyHWND(void) { _data->DestroyHWND(); }
  STDMETHODIMP_(HWND) CreateHWND(HWND parent) { return _data->CreateHWND(parent); }
  _Class *_data;
};
# endif

# ifndef EL_IGNORE_HELPER_MACROS
#  define ELControlWindow_Control(p)        FUNC(p)->Control(PARAM(p))
#  define ELControlWindow_DestroyHWND(p)    FUNC(p)->DestroyHWND(PARAM(p))
#  define ELControlWindow_CreateHWND(p, a)  FUNC(p)->CreateHWND(PARAM_(p) a)
# endif

typedef struct ELLayoutManager ELLayoutManager, *pELLayoutManager;

# undef INTERFACE
# define INTERFACE ELLayoutWindow
DECLARE_INTERFACE_(ELLayoutWindow, ELWindow)
{
  // Base functions
  STDMETHOD_(pELHost, Host)(THIS) PURE;
  STDMETHOD_(ELWINDOWTYPE, Type)(THIS) PURE;
  STDMETHOD_(void, Destroy)(THIS) PURE;
  STDMETHOD_(HWND, GetHWND)(THIS) PURE;
  STDMETHOD_(BOOL, CanResize)(THIS_ RECT *) PURE;
  STDMETHOD_(BOOL, IsSavable)(THIS) PURE;
  STDMETHOD_(void, BeginModal)(THIS) PURE;
  STDMETHOD_(void, EndModal)(THIS) PURE;
  STDMETHOD_(const char *, TypeName)(THIS) PURE;
  STDMETHOD_(void, LoadSettingsFromString)(THIS_ const char *) PURE;
  STDMETHOD_(pELString, SaveSettingsToString)(THIS) PURE;
  STDMETHOD_(void, GetStrings)(THIS_ pELStringArray *, BOOL *) PURE;
  STDMETHOD_(void, SetStrings)(THIS_ pELStringArray) PURE;
  STDMETHOD_(void, ThemeChanged)(THIS_ const pELThemeColors) PURE;
  STDMETHOD_(void, HostStateChanged)(THIS_ const pELHostInfo, HOSTSTATE states_changed) PURE;
  STDMETHOD_(void, ApplicationOptionsChanged)(THIS) PURE;
  // Our functions
  STDMETHOD_(pELLayoutManager, LayoutManager)(THIS) PURE;
  STDMETHOD_(void, Shrink)(THIS) PURE;
  STDMETHOD_(void, Expand)(THIS) PURE;
};
typedef ELLayoutWindow *pELLayoutWindow;

# if defined(__cplusplus)
template<typename _Class>
struct my_layout_window : public ELLayoutWindow {
  my_layout_window() {}
  // Base functions
  STDMETHODIMP_(pELHost) Host(void) { return _data->Host(); }
  STDMETHODIMP_(ELWINDOWTYPE) Type(void) { return ELWINDOWTYPE_LAYOUT; }
  STDMETHODIMP_(void) Destroy(void) { _data->Destroy(); }
  STDMETHODIMP_(HWND) GetHWND(void) { return _data->GetHWND(); }
  STDMETHODIMP_(BOOL) CanResize(RECT *new_rect) { return TRUE; }
  STDMETHODIMP_(BOOL) IsSavable(void) { return FALSE; }
  STDMETHODIMP_(void) BeginModal(void) { }
  STDMETHODIMP_(void) EndModal(void) { }
  STDMETHODIMP_(const char *) TypeName(void) { return "layout_window"; }
  STDMETHODIMP_(void) LoadSettingsFromString(const char *settings) { }
  STDMETHODIMP_(pELString) SaveSettingsToString(void) { return NULL; }
  STDMETHODIMP_(void) GetStrings(pELStringArray *sa, BOOL *release) { *sa = NULL; *release = FALSE; }
  STDMETHODIMP_(void) SetStrings(pELStringArray sa) { }
  STDMETHODIMP_(void) ThemeChanged(const pELThemeColors theme) { _data->ThemeChanged(theme); }
  STDMETHODIMP_(void) HostStateChanged(const pELHostInfo host, HOSTSTATE states_changed) { _data->HostStateChanged(host, states_changed); }
  STDMETHODIMP_(void) ApplicationOptionsChanged(void) { _data->ApplicationOptionsChanged(); }
  // Our functions
  STDMETHODIMP_(pELLayoutManager) LayoutManager(void) { return _data->LayoutManager(); }
  STDMETHODIMP_(void) Shrink(void) { _data->Shrink(); }
  STDMETHODIMP_(void) Expand(void) { _data->Expand(); }
  _Class *_data;
};
# endif

# define MODIFYOPTION_DATA       0
# define MODIFYOPTION_SELECTION  1
# define MODIFYOPTION_FOLLOWECU  2
# define MODIFYOPTION_FORMATTING 3
# define MODIFYOPTION_COLOR      4
# define MODIFYOPTION_VALIDITY   5
# define MODIFYOPTION_LOGGED     6
# define MODIFYOPTION_UNIT       7
# define MODIFYOPTION_LOG_DATA   8
typedef DWORD MODIFYOPTION;

# define SELECTFLAGS_NONE         0x00000000
# define SELECTFLAGS_CHECKBOXES   0x00000001
# define SELECTFLAGS_UNIQUE       0x00000002
# define SELECTFLAGS_CSV_ALLOWED  0x00000004
typedef DWORD SELECTFLAGS;

typedef struct ELChannelSelectInfo {
  CHANNELTYPE types_allowed;
  UINT min_allowed;
  UINT max_allowed;
  SELECTFLAGS flags;
} ELChannelSelectInfo, *pELChannelSelectInfo;

# undef INTERFACE
# define INTERFACE ELChannelGroup
DECLARE_INTERFACE(ELChannelGroup)
{
  STDMETHOD_(void, Update)(THIS) PURE;
  STDMETHOD_(UINT, AddChannel)(THIS_ pELChannelInfo) PURE;
  STDMETHOD_(void, RemoveChannel)(THIS_ pELChannelInfo) PURE;
  STDMETHOD_(UINT, ChannelCount)(THIS) PURE;
  STDMETHOD_(pELChannelInfo, Channel)(THIS_ UINT) PURE;
  STDMETHOD_(BOOL, ChannelIndex)(pELChannelInfo, UINT *) PURE;
  STDMETHOD_(void, ChannelsChanged)(THIS) PURE;
  STDMETHOD_(void, ChannelModified)(THIS_ MODIFYOPTION, pELChannelInfo, INFOSELECT) PURE;
  STDMETHOD_(const pELChannelSelectInfo, Info)(THIS) PURE;
};
typedef ELChannelGroup *pELChannelGroup;

# if defined(__cplusplus)
template <typename _Class>
struct my_channel_group : public ELChannelGroup {
  STDMETHODIMP_(void) Update(void) { _data->Update(); }
  STDMETHODIMP_(BOOL) AddChannel(pELChannelInfo channel) { return _data->AddChannel(channel); }
  STDMETHODIMP_(void) RemoveChannel(pELChannelInfo channel) { _data->AddChannel(channel); }
  STDMETHODIMP_(UINT) ChannelCount(void) { return _data->ChannelCount(); }
  STDMETHODIMP_(pELChannelInfo) Channel(UINT index) { return _data->Channel(index); }
  STDMETHODIMP_(BOOL) ChannelIndex(pELChannelInfo channel, UINT *index) { return _data->ChannelIndex(channel, index); }
  STDMETHODIMP_(void) ChannelsChanged(void) { _data->ChannelsChanged(); }
  STDMETHODIMP_(void) ChannelModified(MODIFYOPTION option, pELChannelInfo channel, INFOSELECT which) { _data->ChannelModified(option, channel, which); }
  STDMETHODIMP_(const pELChannelSelectInfo) Info(void) { return _data->Info(); }
  _Class *_data;
};
# endif

# ifndef EL_IGNORE_HELPER_MACROS
#  define ELChannelGroup_Update(p)                        FUNC(p)->Update(PARAM(p))
#  define ELChannelGroup_AddChannel(p, a)                 FUNC(p)->AddChannel(PARAM_(p) a)
#  define ELChannelGroup_RemoveChannel(p, a)              FUNC(p)->RemoveChannel(PARAM_(p) a)
#  define ELChannelGroup_ChannelCount(p)                  FUNC(p)->ChannelCount(PARAM(p))
#  define ELChannelGroup_Channel(p, a)                    FUNC(p)->Channel(PARAM_(p) a)
#  define ELChannelGroup_ChannelIndex(p, a)               FUNC(p)->ChannelIndex(PARAM_(p) a)
#  define ELChannelGroup_ChannelsChanged(p)               FUNC(p)->ChannelsChanged(PARAM(p))
#  define ELChannelGroup_ChannelModified(p, a, b, c)      FUNC(p)->ChannelModified(PARAM_(p) a, b, c)
#  define ELChannelGroup_Info(p)                          FUNC(p)->Info(PARAM(p))
# endif

#  define SYSMENUSUPPORT_PROPERTIES        0x00000001
#  define SYSMENUSUPPORT_SELECT_CHANNEL    0x00000002
#  define SYSMENUSUPPORT_TABLE_CONVERSION  0x00000004
#  define SYSMENUSUPPORT_XAXIS_CONVERSION  0x00000008
#  define SYSMENUSUPPORT_YAXIS_CONVERSION  0x00000010
#  define SYSMENUSUPPORT_NUMBER_OPTIONS    0x00000020
#  define SYSMENUSUPPORT_COLOR_OPTIONS     0x00000040
#  define SYSMENUSUPPORT_DISPLAYS_LOG      0x40000000
#  define SYSMENUSUPPORT_DISPLAYS_MULTIPLE 0x80000000
#  define SYSMENUSUPPORT_ALL               0xFFFFFFFF
typedef DWORD SYSMENUSUPPORT;

# undef INTERFACE
# define INTERFACE ELControl
DECLARE_INTERFACE_(ELControl, ELChannelGroup)
{
  // Base functions
  STDMETHOD_(void, Update)(THIS) PURE;
  STDMETHOD_(UINT, AddChannel)(THIS_ pELChannelInfo) PURE;
  STDMETHOD_(void, RemoveChannel)(THIS_ pELChannelInfo) PURE;
  STDMETHOD_(UINT, ChannelCount)(THIS) PURE;
  STDMETHOD_(pELChannelInfo, Channel)(THIS_ UINT) PURE;
  STDMETHOD_(BOOL, ChannelIndex)(pELChannelInfo, UINT *) PURE;
  STDMETHOD_(void, ChannelsChanged)(THIS) PURE;
  STDMETHOD_(void, ChannelModified)(THIS_ MODIFYOPTION, pELChannelInfo, INFOSELECT) PURE;
  STDMETHOD_(const pELChannelSelectInfo, Info)(THIS) PURE;

  // Our functions
  STDMETHOD_(pELWindow, Window)(THIS) PURE;
  STDMETHOD_(void, Render)(THIS) PURE;
  STDMETHOD_(SYSMENUSUPPORT, SysMenuSupport)(THIS) PURE;
  STDMETHOD_(pELChannelInfo, ActiveChannel)(THIS) PURE;
  STDMETHOD_(void, UserMathExpression)(THIS_ const char *) PURE;
  STDMETHOD_(BOOL, ShowSelectChannelDlg)(THIS) PURE;
  STDMETHOD_(BOOL, ShowPropertiesDlg)(THIS) PURE;
};
typedef ELControl *pELControl;

# if defined(__cplusplus)
template<typename _Class>
struct my_control : public ELControl {
  my_control() { }
  STDMETHODIMP_(void) Update(void) { _data->Update(); }
  STDMETHODIMP_(UINT) AddChannel(pELChannelInfo channel) { return _data->AddChannel(channel); }
  STDMETHODIMP_(void) RemoveChannel(pELChannelInfo channel) { _data->RemoveChannel(channel); }
  STDMETHODIMP_(UINT) ChannelCount(void) { return _data->ChannelCount(); }
  STDMETHODIMP_(pELChannelInfo) Channel(UINT index) { return _data->Channel(index); }
  STDMETHODIMP_(BOOL) ChannelIndex(pELChannelInfo channel, UINT *index) { return _data->ChannelIndex(channel, index); }
  STDMETHODIMP_(void) ChannelsChanged(void) { _data->ChannelsChanged(); }
  STDMETHODIMP_(void) ChannelModified(MODIFYOPTION option, pELChannelInfo channel, INFOSELECT which) { _data->ChannelModified(option, channel, which); }
  STDMETHODIMP_(const pELChannelSelectInfo) Info(void) { return _data->Info(); }

  STDMETHODIMP_(pELWindow) Window(void) { return _data->Window(); }
  STDMETHODIMP_(void) Render(void) { _data->Render(); }
  STDMETHODIMP_(SYSMENUSUPPORT) SysMenuSupport(void) { return _data->SysMenuSupport(); }
  STDMETHODIMP_(pELChannelInfo) ActiveChannel() { return _data->ActiveChannel(); }
  STDMETHODIMP_(void) UserMathExpression(const char *expression) { _data->UserMathExpression(expression); }
  STDMETHODIMP_(BOOL) ShowSelectChannelDlg(void) { return _data->ShowSelectChannelDlg(); }
  STDMETHODIMP_(BOOL) ShowPropertiesDlg(void) { return _data->ShowPropertiesDlg(); }
  _Class *_data;
};
# endif

# ifndef EL_IGNORE_HELPER_MACROS
#  define ELControl_Window(p)                        FUNC(p)->Window(PARAM(p))
#  define ELControl_Render(p)                        FUNC(p)->Render(PARAM(p))
#  define ELControl_SysMenuSupport(p)                FUNC(p)->SysMenuSupport(PARAM(p))
#  define ELControl_ActiveChannel(p)                 FUNC(p)->ActiveChannel(PARAM(p))
#  define ELControl_UserMathExpression(p, a)         FUNC(p)->UserMathExpression(PARAM_(p) a)
#  define ELControl_ShowSelectChannelDlg(p)          FUNC(p)->ShowSelectChannelDlg(PARAM(p))
#  define ELControl_ShowPropertiesDlg(p)             FUNC(p)->ShowPropertiesDlg(PARAM(p))
# endif

typedef struct ELTargetVersion {
  DWORD major;
  DWORD minor;
} ELTargetVersion, *pELTargetVersion;

# ifndef EL_TARGET_VERSION
#  define EL_TARGET_VERSION 1
# endif
# undef INTERFACE
# define INTERFACE ELTarget
DECLARE_INTERFACE(ELTarget)
{
  STDMETHOD_(DWORD, InterfaceVersion)(THIS) PURE;
  STDMETHOD_(BOOL, IsFullTarget)(THIS) PURE;
  STDMETHOD_(UINT, GetVersion)(THIS_ pELTargetVersion) PURE;
  STDMETHOD_(UINT, GetName)(THIS_ pELString *) PURE;
  STDMETHOD_(UINT, GetModifiableItem)(THIS_ const char *, pConfigurationItemHeader_modifiable_TS) PURE;
  STDMETHOD_(UINT, SetModifiableItem)(THIS_ const char *, pConfigurationItemHeader_modifiable_TS) PURE;
  STDMETHOD_(UINT, GetHarnessPin)(THIS_ BYTE, pPeripheral_HarnessPinDescriptorForPlugin_TS) PURE;
  STDMETHOD_(UINT, Commit)(THIS) PURE;
  STDMETHOD_(UINT, EAL_stop)(THIS) PURE;
  STDMETHOD_(UINT, EAL_start)(THIS) PURE;
  STDMETHOD_(UINT, Validate)(THIS_ pGenericStatusStringResponse_DTS) PURE;
  STDMETHOD_(UINT, GetNameFromChannel)(THIS_ WORD, pELString *) PURE;
  STDMETHOD_(UINT, GetChannelFromName)(THIS_ const char *, WORD *) PURE;
  STDMETHOD_(BOOL, Connected)(THIS) PURE;
};
typedef ELTarget *pELTarget;

# ifndef EL_IGNORE_HELPER_MACROS
#  define ELTarget_InterfaceVersion(p)         FUNC(p)->InterfaceVersion(PARAM(p))
#  define ELTarget_IsFullTarget(p)             FUNC(p)->IsFullTarget(PARAM(p))
#  define ELTarget_GetVersion(p, a)            FUNC(p)->GetVersion(PARAM_(p) a)
#  define ELTarget_GetName(p, a)               FUNC(p)->GetName(PARAM_(p) a)
#  define ELTarget_GetModifiableItem(p, a, b)  FUNC(p)->GetModifiableItem(PARAM_(p) a, b)
#  define ELTarget_SetModifiableItem(p, a, b)  FUNC(p)->SetModifiableItem(PARAM_(p) a, b)
#  define ELTarget_GetHarnessPin(p, a, b)      FUNC(p)->GetHarnessPin(PARAM_(p) a, b)
#  define ELTarget_Commit(p)                   FUNC(p)->Commit(PARAM(p))
#  define ELTarget_EAL_stop(p)                 FUNC(p)->EAL_stop(PARAM(p))
#  define ELTarget_EAL_start(p)                FUNC(p)->EAL_start(PARAM(p))
#  define ELTarget_Validate(p, a)              FUNC(p)->Validate(PARAM_(p) a)
#  define ELTarget_GetNameFromChannel(p, a, b) FUNC(p)->GetNameFromChannel(PARAM_(p) a, b)
#  define ELTarget_GetChannelFromName(p, a, b) FUNC(p)->GetChannelFromName(PARAM_(p) a, b)
#  define ELTarget_Connected(p)                FUNC(p)->Connected(PARAM(p))
# endif

# ifndef EL_FULL_TARGET_VERSION
#  define EL_FULL_TARGET_VERSION 1
# endif
# undef INTERFACE
# define INTERFACE ELFullTarget
DECLARE_INTERFACE_(ELFullTarget, ELTarget)
{
  // Base Functions
  STDMETHOD_(DWORD, InterfaceVersion)(THIS) PURE;
  STDMETHOD_(BOOL, IsFullTarget)(THIS) PURE;
  STDMETHOD_(UINT, GetVersion)(THIS_ pELTargetVersion) PURE;
  STDMETHOD_(UINT, GetName)(THIS_ pELString *) PURE;
  STDMETHOD_(UINT, GetModifiableItem)(THIS_ const char *, pConfigurationItemHeader_modifiable_TS) PURE;
  STDMETHOD_(UINT, SetModifiableItem)(THIS_ const char *, pConfigurationItemHeader_modifiable_TS) PURE;
  STDMETHOD_(UINT, GetHarnessPin)(THIS_ BYTE, pPeripheral_HarnessPinDescriptorForPlugin_TS) PURE;
  STDMETHOD_(UINT, Commit)(THIS) PURE;
  STDMETHOD_(UINT, EAL_stop)(THIS) PURE;
  STDMETHOD_(UINT, EAL_start)(THIS) PURE;
  STDMETHOD_(UINT, Validate)(THIS_ pGenericStatusStringResponse_DTS) PURE;
  STDMETHOD_(UINT, GetNameFromChannel)(THIS_ WORD, pELString *) PURE;
  STDMETHOD_(UINT, GetChannelFromName)(THIS_ const char *, WORD *) PURE;
  STDMETHOD_(BOOL, Connected)(THIS) PURE;

  // Our Functions
};
typedef ELFullTarget *pELFullTarget;

# ifndef EL_CONFIGURATION_VERSION
#  define EL_CONFIGURATION_VERSION 1
# endif
# undef INTERFACE
# define INTERFACE ELConfiguration
DECLARE_INTERFACE_(ELConfiguration, ELTarget)
{
  // Base Functions
  STDMETHOD_(DWORD, InterfaceVersion)(THIS) PURE;
  STDMETHOD_(BOOL, IsFullTarget)(THIS) PURE;
  STDMETHOD_(UINT, GetVersion)(THIS_ pELTargetVersion) PURE;
  STDMETHOD_(UINT, GetName)(THIS_ pELString *) PURE;
  STDMETHOD_(UINT, GetModifiableItem)(THIS_ const char *, pConfigurationItemHeader_modifiable_TS) PURE;
  STDMETHOD_(UINT, SetModifiableItem)(THIS_ const char *, pConfigurationItemHeader_modifiable_TS) PURE;
  STDMETHOD_(UINT, GetHarnessPin)(THIS_ BYTE, pPeripheral_HarnessPinDescriptorForPlugin_TS) PURE;
  STDMETHOD_(UINT, Commit)(THIS) PURE;
  STDMETHOD_(UINT, EAL_stop)(THIS) PURE;
  STDMETHOD_(UINT, EAL_start)(THIS) PURE;
  STDMETHOD_(UINT, Validate)(THIS_ pGenericStatusStringResponse_DTS) PURE;
  STDMETHOD_(UINT, GetNameFromChannel)(THIS_ WORD, pELString *) PURE;
  STDMETHOD_(UINT, GetChannelFromName)(THIS_ const char *, WORD *) PURE;
  STDMETHOD_(BOOL, Connected)(THIS) PURE;

  // Our Functions
  STDMETHOD_(UINT, ItemCount)(THIS) PURE;
  STDMETHOD_(UINT, Item)(THIS_ UINT, pConfigurationItemHeader_modifiable_TS) PURE;
};
typedef ELConfiguration *pELConfiguration;

# ifndef EL_IGNORE_HELPER_MACROS
#  define ELConfiguration_ItemCount(p)  FUNC(p)->ItemCount(PARAM(p))
#  define ELConfiguration_Item(p, a, b) FUNC(p)->Item(PARAM_(p) a, b)
# endif


# undef INTERFACE
# define INTERFACE ELLayoutManager
DECLARE_INTERFACE(ELLayoutManager)
{
  STDMETHOD_(void, PageAdded)(THIS_ UINT, const char *) PURE;
  STDMETHOD_(void, PageRemoved)(THIS_ UINT) PURE;
  STDMETHOD_(void, PageChanged)(THIS_ UINT) PURE;
  STDMETHOD_(void, PageNameChanged)(THIS_ UINT, const char *) PURE;
  STDMETHOD_(void, PageSwap)(THIS_ UINT, UINT) PURE;
  STDMETHOD_(void, PageMoved)(THIS_ UINT, UINT) PURE;
  STDMETHOD_(void, PageSaved)(THIS_ UINT *, UINT) PURE;
  STDMETHOD_(void, VisiblePageChanged)(THIS_ UINT) PURE;

  STDMETHOD_(void, LayoutChanged)(THIS) PURE;
  STDMETHOD_(void, LayoutSaved)(THIS) PURE;
};
typedef ELLayoutManager *pELLayoutManager;

# if defined(__cplusplus)
template<typename _Class>
struct my_layout_manager : public ELLayoutManager {
  my_layout_manager() { }
  STDMETHODIMP_(void) PageAdded(UINT index, const char *name) { _data->PageAdded(index, name); }
  STDMETHODIMP_(void) PageRemoved(UINT index) { _data->PageRemoved(index); }
  STDMETHODIMP_(void) PageChanged(UINT index) { _data->PageChanged(index); }
  STDMETHODIMP_(void) PageNameChanged(UINT index, const char *new_name) { _data->PageNameChanged(index, new_name); }
  STDMETHODIMP_(void) PageSwap(UINT index1, UINT index2) { _data->PageSwap(index1, index2); }
  STDMETHODIMP_(void) PageMoved(UINT from_index, UINT to_index) { _data->PageMoved(from_index, to_index); }
  STDMETHODIMP_(void) PageSaved(UINT *indices, UINT count) { _data->PageSaved(indices, count); }
  STDMETHODIMP_(void) VisiblePageChanged(UINT index) { _data->VisiblePageChanged(index); }
  STDMETHODIMP_(void) LayoutChanged(void) { _data->LayoutChanged(); }
  STDMETHODIMP_(void) LayoutSaved(void) { _data->LayoutSaved(); }
  _Class *_data;
};
# endif

# ifndef EL_IGNORE_HELPER_MACROS
#  define ELLayoutManager_PageAdded(p, a, b)        FUNC(p)->PageAdded(PARAM_(p) a, b)
#  define ELLayoutManager_PageRemoved(p, a)         FUNC(p)->PageRemoved(PARAM_(p) a)
#  define ELLayoutManager_PageChanged(p, a)         FUNC(p)->PageChanged(PARAM_(p) a)
#  define ELLayoutManager_PageNameChanged(p, a, b)  FUNC(p)->PageNameChanged(PARAM_(p) a, b)
#  define ELLayoutManager_PageSwap(p, a, b)         FUNC(p)->PageSwap(PARAM_(p) a, b)
#  define ELLayoutManager_PageMoved(p, a, b)        FUNC(p)->PageMoved(PARAM_(p) a, b)
#  define ELLayoutManager_PageSaved(p, a, b)        FUNC(p)->PageSaved(PARAM_(p) a, b)
#  define ELLayoutManager_VisiblePageChanged(p, a)  FUNC(p)->VisiblePageChanged(PARAM_(p) a)
#  define ELLayoutManager_LayoutChanged(p)          FUNC(p)->LayoutChanged(PARAM(p))
#  define ELLayoutManager_LayoutSaved(p)            FUNC(p)->LayoutSaved(PARAM(p))
# endif

typedef DWORD HOOKTYPE;
# define HOOKTYPE_NONE             0x00000000
# define HOOKTYPE_THEME_RESET      0x00000001
# define HOOKTYPE_THEME_APPLY      0x00000002
# define HOOKTYPE_THEME            0x00000003
# define HOOKTYPE_LAYOUT_OPEN      0x00000004
# define HOOKTYPE_LAYOUT_APPEND    0x00000008 
# define HOOKTYPE_LAYOUT_CLEAR     0x00000010
# define HOOKTYPE_LAYOUT_SAVE      0x00000020
# define HOOKTYPE_LAYOUT           0x0000003C 
# define HOOKTYPE_VIRTUAL_CLEAR    0x00000040
# define HOOKTYPE_VIRTUAL_ADD      0x00000080
# define HOOKTYPE_VIRTUAL_MODIFIED 0x00000100
# define HOOKTYPE_VIRTUAL          0x000001C0
# define HOOKTYPE_ALL              0xFFFFFFFF

# undef INTERFACE
# define INTERFACE ELHook
DECLARE_INTERFACE(ELHook)
{
  STDMETHOD_(void, BeforeCall)(THIS_ HOOKTYPE option);
  STDMETHOD_(void, AfterCall)(THIS_ HOOKTYPE option);
};
typedef ELHook *pELHook;

typedef DWORD LAYOUTDELETEOPTION;
# define LAYOUTDELETEOPTION_WINDOWS 0x00000001
# define LAYOUTDELETEOPTION_PAGE    0x00000008
# define LAYOUTDELETEOPTION_ALL     0xFFFFFFFF

typedef DWORD LAYOUTCLEAROPTION;
# define LAYOUTCLEAROPTION_WINDOWS 0x00000001
# define LAYOUTCLEAROPTION_VIRTUAL 0x00000002
# define LAYOUTCLEAROPTION_THEME   0x00000004
# define LAYOUTCLEAROPTION_PAGES   0x00000009
# define LAYOUTCLEAROPTION_RESET   0x10000009
# define LAYOUTCLEAROPTION_ALL     0xFFFFFFFF

typedef DWORD LAYOUTSAVEOPTION;
# define LAYOUTSAVEOPTION_OVERWRITE 0x00000001
# define LAYOUTSAVEOPTION_VIRTUAL   0x00000002
# define LAYOUTSAVEOPTION_THEME     0x00000004
# define LAYOUTSAVEOPTION_ALL       0xFFFFFFFF

# ifndef EL_LAYOUT_VERSION
#  define EL_LAYOUT_VERSION 2
# endif
# undef INTERFACE
# define INTERFACE ELLayout
DECLARE_INTERFACE(ELLayout)
{
  STDMETHOD_(DWORD, InterfaceVersion)(THIS) PURE;

  STDMETHOD_(UINT, Open)(THIS_ const char *) PURE;
  STDMETHOD_(UINT, Append)(THIS_ const char *) PURE;
  STDMETHOD_(UINT, Save)(THIS_ const char *, LAYOUTSAVEOPTION) PURE;
  STDMETHOD_(UINT, SavePages)(THIS_ const char *, UINT *, UINT, LAYOUTSAVEOPTION) PURE;

  STDMETHOD_(void, EnterModalSection)(THIS) PURE;
  STDMETHOD_(void, LeaveModalSection)(THIS) PURE;

  STDMETHOD_(UINT, RegisterWindow)(THIS_ pELWindow) PURE;
  STDMETHOD_(UINT, UnregisterWindow)(THIS_ pELWindow) PURE;
  STDMETHOD_(UINT, PinWindow)(THIS_ pELWindow, BOOL) PURE;
  STDMETHOD_(UINT, WindowMoveStart)(THIS_ pELWindow) PURE;
  STDMETHOD_(UINT, WindowMoving)(THIS_ pELWindow) PURE;
  STDMETHOD_(UINT, WindowMoveEnd)(THIS_ pELWindow) PURE;
  STDMETHOD_(UINT, WindowClosed)(THIS_ pELWindow) PURE;
  STDMETHOD_(void, UpdateSystemMenu)(THIS_ pELControlWindow) PURE;

  STDMETHOD_(UINT, RegisterControl)(THIS_ pELControl) PURE;
  STDMETHOD_(UINT, UnregisterControl)(THIS_ pELControl) PURE;
  STDMETHOD_(UINT, DuplicateControl)(THIS_ pELControl) PURE;

  STDMETHOD_(UINT, RegisterManager)(THIS_ pELLayoutManager) PURE;
  STDMETHOD_(UINT, UnregisterManager)(THIS_ pELLayoutManager) PURE;

  STDMETHOD_(UINT, Clear)(THIS_ LAYOUTCLEAROPTION) PURE;
  STDMETHOD_(UINT, PageCount)(THIS) PURE;
  STDMETHOD_(UINT, GetPageName)(THIS_ UINT, pELString *) PURE;
  STDMETHOD_(UINT, SetPageName)(THIS_ UINT, const char *) PURE;
  STDMETHOD_(UINT, PageIndex)(THIS_ pELWindow, UINT *) PURE;
  STDMETHOD_(UINT, VisiblePageIndex)(THIS_ UINT *) PURE;
  STDMETHOD_(UINT, GotoPage)(THIS_ UINT) PURE;
  STDMETHOD_(UINT, NewPage)(THIS_ const char *, UINT) PURE;
  STDMETHOD_(UINT, DeletePage)(THIS_ UINT, LAYOUTDELETEOPTION) PURE;
  STDMETHOD_(UINT, MovePage)(THIS_ UINT, UINT) PURE;
  STDMETHOD_(UINT, SwapPages)(THIS_ UINT, UINT) PURE;
  
  STDMETHOD_(const pELThemeColors, ThemeColors)(THIS) PURE;
  STDMETHOD_(void, ResetTheme)(THIS) PURE;
  STDMETHOD_(void, ApplyTheme)(THIS) PURE;
# if EL_LAYOUT_VERSION >= 2
  STDMETHOD_(UINT, LoadTheme)(THIS_ const char *file) PURE;
# endif
};
typedef ELLayout *pELLayout;

# ifndef EL_IGNORE_HELPER_MACROS
#  define ELLayout_Open(p, a)               FUNC(p)->Open(PARAM_(p) a)
#  define ELLayout_Append(p, a)             FUNC(p)->Append(PARAM_(p) a)
#  define ELLayout_Save(p, a, b)            FUNC(p)->Save(PARAM_(p) a, b)
#  define ELLayout_SavePages(p, a, b, c, d) FUNC(p)->SavePages(PARAM_(p) a, b, c, d)
#  define ELLayout_EnterModalSection(p)     FUNC(p)->EnterModalSection(PARAM(p))
#  define ELLayout_LeaveModalSection(p)     FUNC(p)->LeaveModalSection(PARAM(p))
#  define ELLayout_RegisterWindow(p, a)     FUNC(p)->RegisterWindow(PARAM_(p) a)
#  define ELLayout_UnregisterWindow(p, a)   FUNC(p)->UnregisterWindow(PARAM_(p) a)
#  define ELLayout_PinWindow(p, a, b)       FUNC(p)->PinWindow(PARAM_(p) a, b)
#  define ELLayout_WindowMoveStart(p, a)    FUNC(p)->WindowMoveStart(PARAM_(p) a)
#  define ELLayout_WindowMoving(p, a)       FUNC(p)->WindowMoving(PARAM_(p) a)
#  define ELLayout_WindowMoveEnd(p, a)      FUNC(p)->WindowMoveEnd(PARAM_(p) a)
#  define ELLayout_UpdateSystemMenu(p, a)   FUNC(p)->UpdateSystemMenu(PARAM_(p) a)
#  define ELLayout_WindowClosed(p, a)       FUNC(p)->WindowClosed(PARAM_(p) a)
#  define ELLayout_RegisterControl(p, a)    FUNC(p)->RegisterControl(PARAM_(p) a)
#  define ELLayout_UnregisterControl(p, a)  FUNC(p)->UnregisterControl(PARAM_(p) a)
#  define ELLayout_DuplicateControl(p, a)   FUNC(p)->DuplicateControl(PARAM_(p) a)
#  define ELLayout_RegisterManager(p, a)    FUNC(p)->RegisterManager(PARAM_(p) a)
#  define ELLayout_UnregisterManager(p, a)  FUNC(p)->UnregisterManager(PARAM_(p) a)
#  define ELLayout_Clear(p, a)              FUNC(p)->Clear(PARAM_(p) a)
#  define ELLayout_PageCount(p)             FUNC(p)->PageCount(PARAM(p))
#  define ELLayout_GetPageName(p, a, b)     FUNC(p)->GetPageName(PARAM_(p) a, b)
#  define ELLayout_SetPageName(p, a, b)     FUNC(p)->SetPageName(PARAM_(p) a, b)
#  define ELLayout_PageIndex(p, a, b)       FUNC(p)->PageIndex(PARAM_(p) a, b)
#  define ELLayout_VisiblePageIndex(p, a)   FUNC(p)->VisiblePageIndex(PARAM_(p) a)
#  define ELLayout_GotoPage(p, a)           FUNC(p)->GotoPage(PARAM_(p) a)
#  define ELLayout_NewPage(p, a, b)         FUNC(p)->NewPage(PARAM_(p) a, b)
#  define ELLayout_DeletePage(p, a, b)      FUNC(p)->DeletePage(PARAM_(p) a, b)
#  define ELLayout_MovePage(p, a, b)        FUNC(p)->MovePage(PARAM_(p) a, b)
#  define ELLayout_SwapPages(p, a, b)       FUNC(p)->SwapPages(PARAM_(p) a, b)
#  define ELLayout_ThemeColors(p)           FUNC(p)->ThemeColors(PARAM(p))
#  define ELLayout_ResetTheme(p)            FUNC(p)->ResetTheme(PARAM(p))
#  define ELLayout_ApplyTheme(p)            FUNC(p)->ApplyTheme(PARAM(p))
# endif

#define FORMATTINGOPTION_COLOR  1
#define FORMATTINGOPTION_NUMBER 2
#define FORMATTINGOPTION_ALL    0xFFFFFFFF
typedef DWORD FORMATTINGOPTION;

# ifndef EL_GENERIC_FUNCTION_VERSION
#  define EL_GENERIC_FUNCTION_VERSION 3
# endif
typedef struct ELGenericFunctionTable {
  DWORD version;
  UINT (*AllocateString)(const char *value, pELString *out_string);
  UINT (*CopyString)(pELString dest, const pELString src);
  UINT (*SetString)(pELString dest, const char *value, UINT value_length);
  int (*CompareStrings)(const pELString str1, const pELString str2);
  void (*FreeString)(pELString *string);
  UINT (*AllocateStringArray)(UINT count, BOOL own, pELStringArray *out_array);
  UINT (*ResizeStringArray)(UINT count, pELStringArray *string_array);
  void (*FreeStringArray)(pELStringArray *string_array);
  UINT (*AllocateCellInfo)(UINT cell_count, pELCellInfo *cells);
  UINT (*CopyCellInfo)(pELCellInfo dest, const pELCellInfo src);
  UINT (*SetCellInfo)(pELCellInfo cells, const float *float_array, UINT array_length);
  void (*FreeCellInfo)(pELCellInfo *cells);
  UINT (*Print)(pELNumberFormat formatting, float value, pELString *out_string);
  UINT (*Scan)(const char *string, float *out_value);
  UINT (*ColorAt)(const pELColorGradient gradient, const pELColorTriple colors, float value, COLORREF *out_color);
# if EL_GENERIC_FUNCTION_VERSION >= 2
  UINT (*AllocateArray)(UINT count, pELArray *out_array);
  UINT (*ResizeArray)(UINT count, pELArray *out_array);
  void (*FreeArray)(pELArray *arr);
# endif
# if EL_GENERIC_FUNCTION_VERSION >= 3
  // Hooks are registered globally, and generally used by a host to know allow for self cleaning during certain operations.
  UINT (*RegisterHook)(HOOKTYPE for_type, pELHook hook);
  UINT (*UnregisterHook)(HOOKTYPE from_type, pELHook hook);
# endif 
} ELGenericFunctionTable, *pELGenericFunctionTable;

# ifndef EL_IGNORE_HELPER_MACROS
#  define EL_AllocateString(p, a, b)   (p)->AllocateString(a, b)
#  define EL_CopyString(p, a, b)       (p)->CopyString(a, b)
#  define EL_SetString(p, a, b, c)     (p)->SetString(a, b, c)
#  define EL_CompareStrings(p, a, b)   (p)->CompareStrings(a, b)
#  define EL_FreeString(p, a)          (p)->FreeString(a)
#  define EL_AllocateStringArray(p, a, b, c) (p)->AllocateStringArray(a, b, c)
#  define EL_ResizeStringArray(p, a, b) (p)->ResizeStringArray(a, b)
#  define EL_FreeStringArray(p, a)     (p)->FreeStringArray(a)
#  define EL_AllocateCellInfo(p, a, b) (p)->AllocateCellInfo(a, b)
#  define EL_CopyCellInfo(p, a, b)     (p)->CopyCellInfo(a, b)
#  define EL_SetCellInfo(p, a, b, c)   (p)->SetCellInfo(a, b, c)
#  define EL_FreeCellInfo(p, a)        (p)->FreeCellInfo(a)
#  define EL_Print(p, a, b, c)         (p)->Print(a, b, c)
#  define EL_Scan(p, a, b)             (p)->Scan(a, b)
#  define EL_ColorAt(p, a, b, c, d)    (p)->ColorAt(a, b, c, d)
#  define EL_AllocateArray(p, a, b)    (p)->AllocateArray(a, b)
#  define EL_ResizeArray(p, a, b)      (p)->ResizeArray(a, b)
#  define EL_FreeArray(p, a)           (p)->FreeArray(a)
# endif

# ifndef EL_DIALOGS_VERSION
#  define EL_DIALOGS_VERSION 1
# endif
# undef INTERFACE
# define INTERFACE ELDialogs
DECLARE_INTERFACE(ELDialogs)
{
  STDMETHOD_(DWORD, InterfaceVersion)(THIS) PURE;
  STDMETHOD_(UINT, DisplayChannelList)(THIS_ pELChannelGroup, INFOSELECT, pELChannelInfo, const char *) PURE;
  STDMETHOD_(UINT, DisplayFormatting)(THIS_ pELChannelInfo, FORMATTINGOPTION, INFOSELECT) PURE;
  STDMETHOD_(UINT, DisplayNumberFormat)(THIS_ pELNumberFormat) PURE;
  STDMETHOD_(UINT, DisplayColorGradient)(THIS_ pELColorGradient, UINT *) PURE;
  STDMETHOD_(UINT, DisplayColor)(THIS_ COLORREF *) PURE;
  STDMETHOD_(UINT, DisplayChannelProperties)(THIS_ pELChannelInfo, INFOSELECT) PURE;
};
typedef ELDialogs *pELDialogs;

# ifndef EL_IGNORE_HELPER_MACROS
#  define ELDialogs_InterfaceVersion(p)                FUNC(p)->InterfaceVersion(PARAM(p))
#  define ELDialogs_DisplayChannelList(p, a, b, c, d)  FUNC(p)->DisplayChannelList(PARAM_(p) a, b, c, d)
#  define ELDialogs_DisplayFormatting(p, a, b, c)      FUNC(p)->DisplayFormatting(PARAM_(p) a, b, c)
#  define ELDialogs_DisplayNumberFormat(p, a)          FUNC(p)->DisplayNumberFormat(PARAM_(p) a)
#  define ELDialogs_DisplayColorGradient(p, a, b)      FUNC(p)->DisplayColorGradient(PARAM_(p) a, b)
#  define ELDialogs_DisplayColor(p, a)                 FUNC(p)->DisplayColor(PARAM_(p) a)
#  define ELDialogs_DisplayChannelProperties(p, a, b)  FUNC(p)->DisplayChannelProperties(PARAM_(p) a, b)
# endif

# define CONVERSIONOPERATOR_GENERIC  0
# define CONVERSIONOPERATOR_ADD      1
# define CONVERSIONOPERATOR_SUBTRACT 2
# define CONVERSIONOPERATOR_MULTIPLY 3
# define CONVERSIONOPERATOR_DIVIDE   4
typedef UINT CONVERSIONOPERATOR;

# ifndef EL_UNIT_CONVERTER_VERSION
#  define EL_UNIT_CONVERTER_VERSION 3
# endif
# undef INTERFACE
# define INTERFACE ELUnitConverter
DECLARE_INTERFACE(ELUnitConverter)
{
  STDMETHOD_(DWORD, InterfaceVersion)(THIS) PURE;
  STDMETHOD_(UINT, AddConversion)(THIS_ const char *group_name, const char *from_unit, const char *to_unit, CONVERSIONOPERATOR op, float forward_coef, float reverse_coef) PURE;
  STDMETHOD_(UINT, AddGenericConversion)(THIS_ const char *group_name, const char *from_unit, const char *to_uint, const char *forward_expression, const char *reverse_expression) PURE;
  STDMETHOD_(UINT, GetGroupIndex)(THIS_ const char *group_name, UINT *out_index) PURE;
  STDMETHOD_(UINT, GetGroupName)(THIS_ UINT group_index, pELString *out_name) PURE;
  STDMETHOD_(UINT, GetUnitIndex)(THIS_ const char *unit, UINT group_index, UINT *out_index) PURE;
  STDMETHOD_(UINT, GetUnitName)(THIS_ UINT unit_index, pELString *out_name) PURE;
  STDMETHOD_(UINT, GetGroupNameFromUnit)(THIS_ UINT unit_index, pELString *out_name) PURE;
  STDMETHOD_(UINT, GetGroupIndexFromUnit)(THIS_ UINT unit_index, UINT *group_index) PURE;
  // SetConversion:
  //  Sets a global conversion for all channels with from_unit to now display to_unit.
  // from_unit - A unit index specifying the base unit.
  // to_unit - A unit index specifying the new unit.  
  STDMETHOD_(UINT, SetConversion)(THIS_ UINT from_unit, UINT to_unit) PURE;
  // ClearConversion:
  //  Clears the conversion that is occurring from the given unit.
  STDMETHOD_(UINT, ClearConversion)(THIS_ UINT from_unit) PURE;
  STDMETHOD_(UINT, GetAllUnits)(THIS_ UINT group_index, pELArray *units) PURE;
  STDMETHOD_(UINT, GetAllCompatibleUnits)(THIS_ UINT unit, pELArray *units) PURE;
  STDMETHOD_(float, EvaluateConversion)(THIS_ UINT from_unit, UINT to_unit, float value) PURE;
# if EL_UNIT_CONVERTER_VERSION >= 2
  STDMETHOD_(UINT, GetConversion)(THIS_ UINT from_unit, UINT *to_unit) PURE;
# endif
# if EL_UNIT_CONVERTER_VERSION >= 3
  STDMETHOD_(UINT, SetGroupConversion)(THIS_ UINT group_index, UINT unit_index) PURE;
  STDMETHOD_(UINT, ClearGroupConversion)(THIS_ UINT group_index) PURE;
  STDMETHOD_(UINT, GetGroupConversion)(THIS_ UINT group_index, UINT *unit_index) PURE;
# endif
};
typedef ELUnitConverter *pELUnitConverter;

# ifndef EL_IGNORE_HELPER_MACROS
#  define ELUnitConverter_InterfaceVersion(p)                    FUNC(p)->InterfaceVersion(PARAM(p))
#  define ELUnitConverter_AddConversion(p, a, b, c, d, e, f)     FUNC(p)->AddConversion(PARAM_(p) a, b, c, d, e, f)
#  define ELUnitConverter_AddGenericConversion(p, a, b, c, d, e) FUNC(p)->AddGenericConversion(PARAM_(p) a, b, c, d, e)
#  define ELUnitConverter_GetGroupIndex(p, a, b)                 FUNC(p)->GetGroupIndex(PARAM_(p) a, b)
#  define ELUnitConverter_GetGroupName(p, a, b)                  FUNC(p)->GetGroupName(PARAM_(p) a, b)
#  define ELUnitConverter_GetUnitIndex(p, a, b)                  FUNC(p)->GetUnitIndex(PARAM_(p) a, b)
#  define ELUnitConverter_GetUnitName(p, a, b)                   FUNC(p)->GetUnitName(PARAM_(p) a, b)
#  define ELUnitConverter_GetGroupNameFromUnit(p, a, b)          FUNC(p)->GetGroupNameFromUnit(PARAM_(p) a, b)
#  define ELUnitConverter_GetGroupIndexFromUnit(p, a, b)         FUNC(p)->GetGroupIndexFromUnit(PARAM_(p) a, b)
#  define ELUnitConverter_SetConversion(p, a, b)                 FUNC(p)->SetConversion(PARAM_(p) a, b)
#  define ELUnitConverter_ClearConversion(p, a)                  FUNC(p)->ClearConversion(PARAM_(p) a)
#  define ELUnitConverter_GetAllUnits(p, a, b)                   FUNC(p)->GetAllUnits(PARAM_(p) a, b)
#  define ELUnitConverter_GetAllCompatibleUnits(p, a, b)         FUNC(p)->GetAllCompatibleUnits(PARAM_(p) a, b)
#  define ELUnitConverter_EvaluateConversion(p, a, b, c)         FUNC(p)->EvaluateConversion(PARAM_(p) a, b, c)
#  if EL_UNIT_CONVERTER_VERSION >= 2
#   define ELUnitConverter_GetConversion(p, a, b)                FUNC(p)->GetConversion(PARAM_(p) a, b)
#  endif
#  if EL_UNIT_CONVERTER_VERSION >= 3
#   define ELUnitConverter_SetGroupConversion(p, a, b)           FUNC(p)->SetGroupConversion(PARAM_(p) a, b)
#   define ELUnitConverter_ClearGroupConversion(p, a)            FUNC(p)->ClearGroupConversion(PARAM_(p) a)
#   define ELUnitConverter_GetGroupConversion(p, a, b)           FUNC(p)->GetGroupConversion(PARAM_(p) a, b)
#  endif
# endif

# define VIRTUALCHANNELTYPE_VIRTUAL    1
# define VIRTUALCHANNELTYPE_CONVERSION 2
typedef UINT VIRTUALCHANNELTYPE;

# ifndef EL_HOST_VERSION
#  define EL_HOST_VERSION 3
# endif
# undef INTERFACE
# define INTERFACE ELHost
DECLARE_INTERFACE(ELHost)
{
  STDMETHOD_(DWORD, InterfaceVersion)(THIS) PURE;
  STDMETHOD_(const pELVersions, Versions)(THIS) PURE;
  
  STDMETHOD_(pELTarget, Target)(THIS_ UINT) PURE;
  STDMETHOD_(pELFullTarget, FullTarget)(THIS_ UINT target_enumerator) PURE;
  STDMETHOD_(pELLayout, Layout)(THIS) PURE;
  STDMETHOD_(pELDialogs, Dialogs)(THIS) PURE;
  STDMETHOD_(const pELLogInfo, LogInfo)(THIS) PURE;
  STDMETHOD_(const pELHostInfo, HostInfo)(THIS) PURE;
  
  STDMETHOD_(UINT, OpenConfiguration)(THIS_ const char *file, pELConfiguration *out_config) PURE;
  STDMETHOD_(UINT, CloseConfiguration)(THIS_ pELConfiguration *config) PURE;
  
  STDMETHOD_(HWND, GetHWND)(THIS) PURE;
  STDMETHOD_(UINT, RegisterHotkey)(THIS_ const char *sequence, UINT menu_id) PURE;
  STDMETHOD_(UINT, RegisterHotkeyWithFunction)(THIS_ const char *sequence, void (*callback)(void)) PURE;
  STDMETHOD_(BOOL, HandleKeyPressed)(THIS_ MSG *pMsg) PURE;

  STDMETHOD_(pEL3DData, D3DData)(THIS) PURE;
  STDMETHOD_(void, D3DDeviceLost)(THIS) PURE;
  STDMETHOD_(UINT, LoadD3DMesh)(THIS_ const char *file, LPD3DXMESH *out_mesh, D3DMATERIAL9 **out_materials, UINT *out_material_count) PURE;
  STDMETHOD_(UINT, LoadD3DTexture)(THIS_ const char *file, LPDIRECT3DTEXTURE9 *out_texture) PURE;
  STDMETHOD_(UINT, CreateD3DTextMesh)(THIS_ const char *text, LPD3DXMESH *out_mesh) PURE;

  STDMETHOD_(UINT, RegisterChannels)(THIS_ pELChannelGroup group) PURE;
  // UnregisterChannels:
  // group - The group whose channels are being registered.
  // free - Determines if the channels being held by group will be deleted after being unregistered.
  STDMETHOD_(UINT, UnregisterChannels)(THIS_ pELChannelGroup group, BOOL free) PURE;
  
  // Inform the host to notify this group when changes occur.
  STDMETHOD_(UINT, RegisterGroup)(THIS_ pELChannelGroup group) PURE;
  // Remove the group from host knowledge.
  STDMETHOD_(UINT, UnregisterGroup)(THIS_ pELChannelGroup group) PURE;

  // Returns NULL if the option has not changed, or a valid cstring if the value changed.
  STDMETHOD_(const char *, OptionChanged)(THIS_ const char *option_name) PURE;
  STDMETHOD_(UINT, OptionValue)(THIS_ const char *option_name, pELString *out_value) PURE;

  // StartLogging:
  // file - The file to store the log while logging is active.  Generally a temporary file.
  STDMETHOD_(UINT, StartLogging)(THIS_ const char *file) PURE;
  // StopLogging:
  // out_file - Set by the host to the temporary file (if any) to which the log was being saved.
  STDMETHOD_(UINT, StopLogging)(THIS_ pELString *out_file) PURE;
  // LogChannels:
  // channels - The channels to set to being logged. 
  // count - The number of channels being set.
  STDMETHOD_(UINT, LogChannels)(THIS_ pELChannelInfo *channels, UINT count) PURE;
  // SetLogDisplayRange:
  //   Inform the host to move the log view to display the given range.
  // start_time - The new start time to view.
  // end_time - The new end time to view.
  STDMETHOD_(UINT, SetLogDisplayRange)(THIS_ LOGTIMESTAMP start_time, LOGTIMESTAMP end_time) PURE;
  // SetLogCursor:
  //   Inform the host to move the view cursor to be at a given time.
  // time - The time to view with the cursor.  Setting past the end of the log results in viewing live data.
  STDMETHOD_(UINT, SetLogCursor)(THIS_ LOGTIMESTAMP time) PURE;

  STDMETHOD_(BOOL, HandleSystemMenu)(THIS_ pELControl control, UINT id, pELChannelInfo channel) PURE;
  STDMETHOD_(UINT, SetChannels)(THIS_ pELChannelGroup group, pELString *channel_names, UINT names_count) PURE;
  // ModifyChannel:
  //   Adjusts the channel on the connected target.  Used for table channels.
  // channel - The channel being adjusted.
  // which - The part of the channel being modified.  
  STDMETHOD_(UINT, ModifyChannel)(THIS_ pELChannelInfo channel, INFOSELECT which) PURE;
  STDMETHOD_(UINT, ExpandTable)(THIS_ pELChannelInfo channel, float at, BOOL row) PURE;
  STDMETHOD_(UINT, ShrinkTable)(THIS_ pELChannelInfo channel, UINT at, BOOL row) PURE;
  STDMETHOD_(UINT, ApplyMathExpression)(THIS_ pELChannelInfo channel, INFOSELECT which, const char *expression, const RECT *selection) PURE;
  STDMETHOD_(UINT, WriteChannel)(THIS_ pELChannelInfo channel, float value, BOOL initial) PURE;
  STDMETHOD_(UINT, SetSelection)(THIS_ pELChannelInfo channel, const RECT *selection) PURE;
  STDMETHOD_(UINT, SetFollowECU)(THIS_ pELChannelInfo channel, BOOL follow) PURE;

  STDMETHOD_(pELChannelInfo, GetChannelInfo)(THIS_ const char *channel_name) PURE;
  STDMETHOD_(UINT, AllocateChannelInfo)(THIS_ const char *channel_name, pELChannelInfo *out_channel, BOOL shared) PURE;
  STDMETHOD_(void, FreeChannelInfo)(THIS_ pELChannelInfo *channel) PURE;

  STDMETHOD_(void, ErrorMessage)(THIS_ const char *message) PURE; 
  STDMETHOD_(UINT, AddVirtualChannel)(THIS_ VIRTUALCHANNELTYPE type, const char *name, pELStringArray, pELStringArray inputs) PURE;
#if EL_HOST_VERSION >= 2
  STDMETHOD_(UINT, ReRegisterChannels)(THIS_ pELChannelGroup group) PURE;
  STDMETHOD_(UINT, SetChannelsEx)(THIS_ pELChannelGroup group, pELStringArray channel_names) PURE;
  // ModifyChannelEx:
  //   Adjusts the channel on the connected target.  Used for table channels.
  // channel - The channel being adjusted.
  // cells - The actual data to set.
  // which - The part of the channel being modified.  
  STDMETHOD_(UINT, ModifyChannelEx)(THIS_ pELChannelInfo channel, pELCellInfo cells, INFOSELECT which) PURE;
  STDMETHOD_(pELUnitConverter, UnitConverter)(THIS) PURE;
  // AdjustUnitInName
  //  Sets the out_string to be the channel name with the converted unit instead of base unit inside the [ ].
  STDMETHOD_(UINT, AdjustUnitInName)(THIS_ pELChannelInfo channel, INFOSELECT which, pELString *out_string) PURE;
#endif
#if EL_HOST_VERSION >= 3
  STDMETHOD_(UINT, ClearVirtualChannels)(THIS) PURE;
  STDMETHOD_(UINT, RegisterChannelsWithName)(THIS_ pELChannelGroup group, const char *channel_name) PURE;
  STDMETHOD_(UINT, UnregisterChannelsWithName)(THIS_ pELChannelGroup group, const char *channel_name, BOOL clear) PURE;
#endif
};

# ifndef EL_IGNORE_HELPER_MACROS
#  define ELHost_InterfaceVersion(p)                      FUNC(p)->InterfaceVersion(PARAM(p))
#  define ELHost_Versions(p)                              FUNC(p)->Versions(PARAM(p))
#  define ELHost_Target(p, a)                             FUNC(p)->Target(PARAM_(p) a)
#  define ELHost_Layout(p)                                FUNC(p)->Layout(PARAM(p))
#  define ELHost_Dialogs(p)                               FUNC(p)->Dialogs(PARAM(p))
#  define ELHost_LogInfo(p)                               FUNC(p)->LogInfo(PARAM(p))
#  define ELHost_HostInfo(p)                              FUNC(p)->HostInfo(PARAM(p))
#  define ELHost_OpenConfiguration(p, a)                  FUNC(p)->OpenConfiguration(PARAM_(p) a)
#  define ELHost_CloseConfiguration(p, a)                 FUNC(p)->CloseConfiguration(PARAM_(p) a)
#  define ELHost_GetHWND(p)                               FUNC(p)->GetHWND(PARAM(p))
#  define ELHost_RegisterHotkey(p, a, b)                  FUNC(p)->RegisterHotkey(PARAM_(p) a, b)
#  define ELHost_RegisterHotkeyWithFunction(p, a, b)      FUNC(p)->RegisterHotkeyWithFunction(PARAM_(p) a, b)
#  define ELHost_HandleKeyPressed(p, a)                   FUNC(p)->HandleKeyPressed(PARAM_(p) a)
#  define ELHost_D3DData(p)                               FUNC(p)->D3DData(PARAM(p))
#  define ELHost_D3DDeviceLost(p)                         FUNC(p)->D3DDeviceLost(PARAM(p))
#  define ELHost_LoadD3DMesh(p, a, b, c, d)               FUNC(p)->LoadD3DMesh(PARAM_(p) a, b, c, d)
#  define ELHost_LoadD3DTexture(p, a, b)                  FUNC(p)->LoadD3DTexture(PARAM_(p) a, b)
#  define ELHost_CreateD3DTextMesh(p, a, b)               FUNC(p)->CreateD3DTextMesh(PARAM_(p) a, b)
#  define ELHost_RegisterChannels(p, a)                   FUNC(p)->RegisterChannels(PARAM_(p) a)
#  define ELHost_UnregisterChannels(p, a, b)              FUNC(p)->UnregisterChannels(PARAM_(p) a, b)
#  define ELHost_RegisterGroup(p, a)                      FUNC(p)->RegisterGroup(PARAM_(p) a)
#  define ELHost_UnregisterGroup(p, a)                    FUNC(p)->UnregisterGroup(PARAM_(p) a)
#  define ELHost_OptionChanged(p, a)                      FUNC(p)->OptionChanged(PARAM_(p) a)
#  define ELHost_OptionValue(p, a, b)                     FUNC(p)->OptionValue(PARAM_(p) a, b)
#  define ELHost_StartLogging(p, a)                       FUNC(p)->StartLogging(PARAM_(p) a)
#  define ELHost_StopLogging(p, a)                        FUNC(p)->StopLogging(PARAM_(p) a)
#  define ELHost_LogChannels(p, a, b)                     FUNC(p)->LogChannels(PARAM_(p) a, b)
#  define ELHost_SetLogDisplayRange(p, a, b)              FUNC(p)->SetLogDisplayrange(PARAM_(p) a, b)
#  define ELHost_SetLogCursor(p, a)                       FUNC(p)->SetLogCursor(PARAM_(p) a)
#  define ELHost_HandleSystemMenu(p, a, b, c)             FUNC(p)->HandleSystemMenu(PARAM_(p) a, b, c)
#  define ELHost_SetChannels(p, a, b, c)                  FUNC(p)->SetChannels(PARAM_(p) a, b, c)
#  define ELHost_ModifyChannel(p, a, b)                   FUNC(p)->ModifyChannel(PARAM_(p) a, b)
#  define ELHost_ExpandTable(p, a, b, c)                  FUNC(p)->ExpandTable(PARAM_(p) a, b, c)
#  define ELHost_ShrinkTable(p, a, b, c)                  FUNC(p)->ShrinkTable(PARAM_(p) a, b, c)
#  define ELHost_ApplyMathExpression(p, a, b, c, d, e, f) FUNC(p)->ApplyMathExpression(PARAM_(p) a, b, c, d, e, f)
#  define ELHost_WriteChannel(p, a, b, c)                 FUNC(p)->WriteChannel(PARAM_(p) a, b, c)
#  define ELHost_SetSelection(p, a, b)                    FUNC(p)->SetSelection(PARAM_(p) a, b)
#  define ELHost_SetFollowECU(p, a, b)                    FUNC(p)->SetFollowECU(PARAM_(p) a, b)
#  define ELHost_AllocateChannelInfo(p, a, b, c)          FUNC(p)->AllocateChannelInfo(PARAM_(p) a, b, c)
#  define ELHost_FreeChannelInfo(p, a)                    FUNC(p)->FreeChannelInfo(PARAM_(p) a)
#  define ELHost_ErrorMessage(p, a)                       FUNC(p)->ErrorMessage(PARAM_(p) a)
#  define ELHost_AddVirtualChannel(p, a, b, c, d)         FUNC(p)->AddVirtualChannel(PARAM_(p) a, b, c, d)
#  if EL_HOST_VERSION >= 2
#   define ELHost_ReRegisterChannels(p, a, b)              FUNC(p)->ReRegisterChannels(PARAM_(p) a, b)
#   define ELHost_SetChannelsEx(p, a, b)                   FUNC(p)->SetChannelsEx(PARAM_(p) a, b)
#   define ELHost_ModifyChannelEx(p, a, b, c)              FUNC(p)->ModifyChannelEx(PARAM_(p) a, b, c)
#   define ELHost_UnitConverter(p)                         FUNC(p)->UnitConverter(PARAM(p))
#   define ELHost_AdjustUnitInName(p, a, b, c)             FUNC(p)->AdjustUnitInName(PARAM_(p) a, b, c)
#  endif
#  if EL_HOST_VERSION >= 3
#   define ELHost_ClearVirtualChannels(p)                  FUNC(p)->ClearVirtualChannels(PARAM(p))
#   define ELHost_RegisterChannelsWithName(p, a, b)        FUNC(p)->RegisterChannelsWithName(PARAM_(p) a, b)
#   define ELHost_UnregisterChannelsWithName(p, a, b, c)   FUNC(p)->UnregisterChannelsWithName(PARAM_(p) a, b, c)
#  endif
# endif

// Undefine document specific stuff.
# undef FUNC
# undef PARAM
# undef PARAM_

# define EL_LAYOUT_TAB_CONTROL_HEIGHT 19
# define EL_LAYOUT_SHRINK_SIZE 10
# define EL_MINIMUM_CONTOL_WINDOW_WIDTH 60
# define EL_MINIMUM_CONTOL_WINDOW_HEIGHT 20
# define EL_MAIN_WINDOW_MIN_WIDTH 350
# define EL_MAX_LAYOUT_PAGES 50

typedef pELControlWindow (*ControlWindowCreateFunction)(void);
typedef struct ELControlInfo {
  const char *name;
  pELControlWindow (*Create)(void);
} ELControlInfo, *pELControlInfo;

typedef pELWindow (*WindowCreateFunction)(HWND);
typedef struct ELWindowInfo {
  const char *name;
  pELWindow (*Create)(HWND);
} ELWindowInfo, *pELWindowInfo;

# define LAYOUTWINDOWPOS_TOP    0
# define LAYOUTWINDOWPOS_LEFT   0
# define LAYOUTWINDOWPOS_BOTTOM 1
# define LAYOUTWINDOWPOS_RIGHT  1
typedef DWORD LAYOUTWINDOWPOS;

typedef pELLayoutWindow (*LayoutWindowCreateFunction)(HWND, LAYOUTWINDOWPOS);
typedef struct ELLayoutInfo {
  const char *name;
  pELLayoutWindow (*Create)(HWND, LAYOUTWINDOWPOS);
} ELLayoutInfo, *pELLayoutInfo;

# define PLUGINSTATUS_SUCCESS   DS_SUCCESS
# define PLUGINSTATUS_FAILURE   DS_FAILURE
typedef DWORD PLUGINSTATUS;

// Functions required
#ifndef EL_DLL_EXPORT
# define EL_DLL_EXPORT _declspec(dllexport)
#endif

#if defined(__cplusplus)
extern "C" {
#endif
  EL_DLL_EXPORT const pELVersions InitializeDockablePlugIn(const pELVersions versions, pELHost host, const pELGenericFunctionTable generic_functions);
  EL_DLL_EXPORT void InitializeDockablePlugInFinished(PLUGINSTATUS status, UINT *plugin_ids, UINT *menu_ids, UINT id_count);
  EL_DLL_EXPORT void GetPlugInMenuString(char **menu_string, UINT *length);
  EL_DLL_EXPORT void MenuClicked(WORD menu_id);
  EL_DLL_EXPORT void GetPlugInName(char **plugin_name, UINT *length);
  EL_DLL_EXPORT void TargetConnected(pELTarget target);
  EL_DLL_EXPORT void TargetDisconnected(pELTarget target);
  EL_DLL_EXPORT void HostReady(pELHost host, pELLayout layout);
# if EL_UPGRADE_HOOK_SUPPORT
  EL_DLL_EXPORT int UpgradeHook(int status, void *context);
# endif  
# if EL_SUPPORTED_CONTROLS_SUPPORT
  EL_DLL_EXPORT pELControlInfo SupportedControls(void);
# endif  
# if EL_SAVABLE_WINDOWS_SUPPORT
  EL_DLL_EXPORT pELWindowInfo SavableWindows(void);
# endif  
# if EL_LAYOUT_CONTROLS_SUPPORT
  EL_DLL_EXPORT pELLayoutInfo LayoutControls(void);
# endif  
#if defined(__cplusplus)
}
#endif

/*** End Dockable API ***/

#endif
